# dissertation_helper.py
"""
–ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó.
–£–≤—ñ–º–∫–Ω—É—Ç–∏: analyze_for_dissertation=True –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Å–∏–º—É–ª—è—Ü—ñ—ó.
–ó–±–∏—Ä–∞—î –º–µ—Ç—Ä–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –±–µ–∑ –∑–º—ñ–Ω –≤ —ñ—Å–Ω—É—é—á–æ–º—É –∫–æ–¥—ñ.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from typing import Dict, Any, Optional
import os
import json

class DissertationHelper:
    """–ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –¥–ª—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó. –£–≤—ñ–º–∫–Ω—É—Ç–∏ –æ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º."""
    
    def __init__(self):
        self.enabled = False
        self.output_dir = "./dissertation_output"
        self.collected_data = {}
        
    def enable(self, output_dir: str = "./dissertation_output"):
        """–£–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó"""
        self.enabled = True
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
        print(f"üìä –ê–Ω–∞–ª—ñ–∑ –¥–ª—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó —É–≤—ñ–º–∫–Ω–µ–Ω–æ -> {output_dir}")
        
    def collect_simulation_step(self, step_data: Dict[str, Any]):
        """–ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –Ω–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ —Å–∏–º—É–ª—è—Ü—ñ—ó (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)"""
        if not self.enabled:
            return
            
        # –ü—Ä–æ—Å—Ç–æ –∑–±–∏—Ä–∞—î–º–æ –≤—Å–µ –≤ —Å–ø–∏—Å–æ–∫
        if 'steps' not in self.collected_data:
            self.collected_data['steps'] = []
        self.collected_data['steps'].append(step_data)
        
    def collect_model_results(self, model_type: str, metrics: Dict[str, float]):
        """–ó–±—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –º–æ–¥–µ–ª—ñ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)"""
        if not self.enabled:
            return
            
        if 'models' not in self.collected_data:
            self.collected_data['models'] = {}
        self.collected_data['models'][model_type] = metrics
        
    def finalize_and_save(self) -> Optional[str]:
        """–§—ñ–Ω–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤ –∫—ñ–Ω—Ü—ñ)"""
        if not self.enabled or not self.collected_data:
            return None
            
        print("üîç –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫—Ä–æ–∫–∏ –≤ DataFrame
        if 'steps' in self.collected_data:
            df = pd.DataFrame(self.collected_data['steps'])
            self._analyze_and_save(df)
            
        return self.output_dir
        
    def _analyze_and_save(self, df: pd.DataFrame):
        """–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"""
        
        # 1. –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—Å—Ç—ñ
        metrics = self._calculate_key_metrics(df)
        
        # 2. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —É JSON
        with open(f"{self.output_dir}/metrics.json", 'w', encoding='utf-8') as f:
            json.dump(metrics, f, ensure_ascii=False, indent=2)
            
        # 3. –ü—Ä–æ—Å—Ç–∏–π CSV –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        essential_cols = ['feed_fe_percent', 'ore_mass_flow', 'solid_feed_percent',
                         'concentrate_fe_percent', 'concentrate_mass_flow']
        available_cols = [col for col in essential_cols if col in df.columns]
        if available_cols:
            df[available_cols].to_csv(f"{self.output_dir}/simulation_data.csv", index=False)
            
        # 4. –û–¥–Ω–∞ –∫–ª—é—á–æ–≤–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
        self._create_key_plot(df)
        
        # 5. –¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç
        self._create_text_report(metrics)
        
        print(f"‚úÖ –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {self.output_dir}")
        
    def _calculate_key_metrics(self, df: pd.DataFrame) -> Dict[str, Any]:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó"""
        metrics = {}
        
        try:
            # S-–ø–æ–¥—ñ–±–Ω—ñ—Å—Ç—å (—è–∫—â–æ —î –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏)
            if all(col in df.columns for col in ['concentrate_fe_percent', 'solid_feed_percent']):
                fe_values = df['concentrate_fe_percent'].dropna()
                metrics['s_curve_skewness'] = float(fe_values.skew())
                metrics['s_curve_kurtosis'] = float(fe_values.kurtosis())
                
            # –ü–æ—Ä–æ–≥–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏
            if 'concentrate_fe_percent' in df.columns:
                gradients = df['concentrate_fe_percent'].diff().abs().dropna()
                if len(gradients) > 0:
                    metrics['threshold_events_95pct'] = int((gradients > gradients.quantile(0.95)).sum())
                    metrics['coefficient_of_variation'] = float(gradients.std() / gradients.mean()) if gradients.mean() > 0 else 0
                    
            # –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—É
            for param in ['concentrate_fe_percent', 'concentrate_mass_flow']:
                if param in df.columns:
                    values = df[param].dropna()
                    if len(values) > 0 and values.mean() > 0:
                        metrics[f'{param}_cv'] = float(values.std() / values.mean())
                        
            # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π (—è–∫—â–æ —î –¥–∞–Ω—ñ)
            if 'models' in self.collected_data and len(self.collected_data['models']) > 1:
                models = self.collected_data['models']
                if 'linear' in models and 'krr' in models:
                    linear_mse = models['linear'].get('test_mse_total', float('inf'))
                    krr_mse = models['krr'].get('test_mse_total', float('inf'))
                    if linear_mse < float('inf') and krr_mse < float('inf') and krr_mse > 0:
                        improvement = ((linear_mse - krr_mse) / krr_mse) * 100
                        metrics['kernel_vs_linear_improvement_pct'] = float(improvement)
                        
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–µ—Ç—Ä–∏–∫: {e}")
            
        return metrics
        
    def _create_key_plot(self, df: pd.DataFrame):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–¥–Ω—ñ—î—ó –∫–ª—é—á–æ–≤–æ—ó –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
        try:
            fig, ax = plt.subplots(1, 1, figsize=(10, 6))
            
            # –ü—Ä–æ—Å—Ç–∏–π –≥—Ä–∞—Ñ—ñ–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            if 'concentrate_fe_percent' in df.columns:
                ax.plot(df.index, df['concentrate_fe_percent'], 
                       label='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è Fe (%)', linewidth=1.5)
                       
            if 'solid_feed_percent' in df.columns:
                ax2 = ax.twinx()
                ax2.plot(df.index, df['solid_feed_percent'], 
                        label='–í—ñ–¥—Å–æ—Ç–æ–∫ —Ç–≤–µ—Ä–¥–æ–≥–æ (%)', color='orange', alpha=0.7)
                ax2.set_ylabel('–í—ñ–¥—Å–æ—Ç–æ–∫ —Ç–≤–µ—Ä–¥–æ–≥–æ (%)')
                ax2.legend(loc='upper right')
                
            ax.set_xlabel('–ß–∞—Å (–∫—Ä–æ–∫–∏)')
            ax.set_ylabel('–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è Fe (%)')
            ax.set_title('–î–∏–Ω–∞–º—ñ–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø—Ä–æ—Ü–µ—Å—É')
            ax.legend(loc='upper left')
            ax.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.savefig(f"{self.output_dir}/key_dynamics.png", dpi=300, bbox_inches='tight')
            plt.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫—É: {e}")
            
    def _create_text_report(self, metrics: Dict[str, Any]):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É –¥–ª—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó"""
        
        report_lines = [
            "# –ó–í–Ü–¢ –î–õ–Ø –î–ò–°–ï–†–¢–ê–¶–Ü–á",
            "=" * 50,
            "",
            "## –ö–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—Å—Ç—ñ:",
            ""
        ]
        
        # S-–ø–æ–¥—ñ–±–Ω—ñ—Å—Ç—å
        if 's_curve_skewness' in metrics:
            report_lines.extend([
                f"S-–ø–æ–¥—ñ–±–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—É:",
                f"  ‚Ä¢ –ê—Å–∏–º–µ—Ç—Ä—ñ—è: {metrics['s_curve_skewness']:.3f}",
                f"  ‚Ä¢ –ö—É—Ä—Ç–æ–∑–∏—Å: {metrics['s_curve_kurtosis']:.3f}",
                ""
            ])
            
        # –ü–æ—Ä–æ–≥–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏
        if 'threshold_events_95pct' in metrics:
            report_lines.extend([
                f"–ü–æ—Ä–æ–≥–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏:",
                f"  ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—ñ–∑–∫–∏—Ö –∑–º—ñ–Ω (95%): {metrics['threshold_events_95pct']}",
                f"  ‚Ä¢ –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –≤–∞—Ä—ñ–∞—Ü—ñ—ó: {metrics.get('coefficient_of_variation', 'N/A'):.3f}",
                ""
            ])
            
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
        if 'kernel_vs_linear_improvement_pct' in metrics:
            improvement = metrics['kernel_vs_linear_improvement_pct']
            report_lines.extend([
                f"–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π:",
                f"  ‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —è–¥–µ—Ä–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤: {improvement:.1f}%",
                f"  ‚Ä¢ {'‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –≤—Ç—Ä–∞—Ç–∏ –ª—ñ–Ω—ñ–π–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π' if improvement > 10 else '‚ùå –í—Ç—Ä–∞—Ç–∏ –ª—ñ–Ω—ñ–π–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –Ω–µ –∑–Ω–∞—á–Ω—ñ'}",
                ""
            ])
            
        # –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
        cv_metrics = {k: v for k, v in metrics.items() if k.endswith('_cv')}
        if cv_metrics:
            report_lines.extend([
                "–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—É:",
                *[f"  ‚Ä¢ {k.replace('_cv', '')}: CV = {v:.3f}" for k, v in cv_metrics.items()],
                ""
            ])
            
        # –í–∏—Å–Ω–æ–≤–∫–∏
        report_lines.extend([
            "## –í–∏—Å–Ω–æ–≤–∫–∏ –¥–ª—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó:",
            "",
            "1. –ü—Ä–æ—Ü–µ—Å –º–∞–≥–Ω—ñ—Ç–Ω–æ—ó —Å–µ–ø–∞—Ä–∞—Ü—ñ—ó –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –Ω–µ–ª—ñ–Ω—ñ–π–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
            "2. –í–∏—è–≤–ª–µ–Ω–æ –ø–æ—Ä–æ–≥–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏ —Ç–∞ S-–ø–æ–¥—ñ–±–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ",
            "3. –Ø–¥–µ—Ä–Ω—ñ –º–µ—Ç–æ–¥–∏ –ø–æ–∫–∞–∑—É—é—Ç—å –ø–µ—Ä–µ–≤–∞–≥—É –Ω–∞–¥ –ª—ñ–Ω—ñ–π–Ω–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏" if 'kernel_vs_linear_improvement_pct' in metrics else "3. –ü–æ—Ç—Ä—ñ–±–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –º–æ–¥–µ–ª–µ–π",
            "",
            "üìä –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤ metrics.json —Ç–∞ simulation_data.csv"
        ])
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
        with open(f"{self.output_dir}/report.txt", 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_lines))


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
_dissertation_helper = DissertationHelper()

# –ü—Ä–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
def enable_dissertation_analysis(output_dir: str = "./dissertation_output"):
    """–£–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó"""
    _dissertation_helper.enable(output_dir)

def log_step(step_data: Dict[str, Any]):
    """–ó–∞–ø–∏—Å–∞—Ç–∏ –¥–∞–Ω—ñ –∫—Ä–æ–∫—É —Å–∏–º—É–ª—è—Ü—ñ—ó"""
    _dissertation_helper.collect_simulation_step(step_data)

def log_model(model_type: str, metrics: Dict[str, float]):
    """–ó–∞–ø–∏—Å–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º–æ–¥–µ–ª—ñ"""
    _dissertation_helper.collect_model_results(model_type, metrics)

def save_dissertation_materials() -> Optional[str]:
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –¥–∏—Å–µ—Ä—Ç–∞—Ü—ñ—ó"""
    return _dissertation_helper.finalize_and_save()


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
if __name__ == "__main__":
    # –¢–µ—Å—Ç –º–æ–¥—É–ª—è
    enable_dissertation_analysis("./test_output")
    
    # –Ü–º—ñ—Ç–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    for i in range(100):
        log_step({
            'feed_fe_percent': 37 + np.random.normal(0, 0.5),
            'concentrate_fe_percent': 53 + np.random.normal(0, 1),
            'solid_feed_percent': 30 + np.random.normal(0, 2)
        })
    
    log_model('linear', {'test_mse_total': 0.15})
    log_model('krr', {'test_mse_total': 0.12})
    
    output_path = save_dissertation_materials()
    print(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {output_path}")