# ekf.py
import numpy as np
from model import KernelModel
from sklearn.preprocessing import StandardScaler

class ExtendedKalmanFilter:

    def __init__(self,
                 model: KernelModel,
                 x_scaler: StandardScaler,
                 y_scaler: StandardScaler,
                 x0: np.ndarray,            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∏–π –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
                 P0: np.ndarray,            # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–≤–∞—Ä—ñ–∞—Ü—ñ—è –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ—Å—Ç—ñ
                 Q: np.ndarray,             # –ö–æ–≤–∞—Ä—ñ–∞—Ü—ñ—è —à—É–º—É –ø—Ä–æ—Ü–µ—Å—É
                 R: np.ndarray,             # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–≤–∞—Ä—ñ–∞—Ü—ñ—è —à—É–º—É –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—ó R
                 lag: int,
                 beta_R: float = 0.5,
                 q_adaptive_enabled: bool = True,
                 q_alpha: float = 0.98,
                 q_nis_threshold: float = 1.5,
                 use_scaled_state: bool = True):  # ‚úÖ –ù–û–í–ò–ô: –§–ª–∞–≥ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
    
        self._debug_count = 0  # –î–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    
        self.model = model
        self.x_scaler = x_scaler
        self.y_scaler = y_scaler
        self.L = lag
        self.n_phys = (lag + 1) * 3  # –†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å —Ñ—ñ–∑–∏—á–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ —Å—Ç–∞–Ω—É
        self.n_dist = R.shape[0]     # –†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞ –∑–±—É—Ä–µ–Ω—å
        self.n_aug = self.n_phys + self.n_dist # –ó–∞–≥–∞–ª—å–Ω–∞ —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        
        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –§–ª–∞–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        self.use_scaled_state = use_scaled_state
    
        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –°—Ç–∞–Ω —Ç–µ–ø–µ—Ä –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–∏–π
        # –Ø–∫—â–æ use_scaled_state=True: –í–°–Ø x_hat (—ñ —Ñ—ñ–∑–∏—á–Ω–∞, —ñ –∑–±—É—Ä–µ–Ω–Ω—è) –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω—ñ
        # –Ø–∫—â–æ use_scaled_state=False: –í–°–Ø x_hat –Ω–µ–º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–∞ (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
        self.x_hat = x0.copy()
        self.P = P0.copy()
        
        if self.use_scaled_state:
            print(f"   ‚úÖ EKF initialized with SCALED state (all components scaled)")
            print(f"      State range: [{self.x_hat.min():.3f}, {self.x_hat.max():.3f}]")
        else:
            print(f"   ‚ö†Ô∏è  EKF initialized with UNSCALED state (legacy mode)")
    
        # –ú–∞—Ç—Ä–∏—Ü—ñ —à—É–º—ñ–≤
        self.Q = Q
        self._R_initial = R 
        self.R = R 
        self.beta_R = beta_R 
    
        # –ê–¥–∞–ø—Ç–∞—Ü—ñ—è Q
        self.q_adaptive_enabled = q_adaptive_enabled
        self.q_alpha = q_alpha
        self.q_nis_threshold = q_nis_threshold
        self.q_scale = 1.0
        
        # –ú–∞—Ç—Ä–∏—Ü—è –ø–µ—Ä–µ—Ö–æ–¥—É —Å—Ç–∞–Ω—É F
        self._build_state_transition_matrix()
        
        # –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó
        self.last_innovation = None        

    def _build_state_transition_matrix(self):
        """
        –ë—É–¥—É—î –º–∞—Ç—Ä–∏—Ü—é –ø–µ—Ä–µ—Ö–æ–¥—É —Å—Ç–∞–Ω—É F, —è–∫–∞ —î —è–∫–æ–±—ñ–∞–Ω–æ–º —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ—Ö–æ–¥—É —Å—Ç–∞–Ω—É f.
        F –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î, —è–∫ –ª—ñ–Ω–µ–∞—Ä–∏–∑–æ–≤–∞–Ω–∏–π —Å—Ç–∞–Ω x_k –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ x_{k-1}.
        """
        self.F = np.zeros((self.n_aug, self.n_aug))
        
        # –ë–ª–æ–∫ –¥–ª—è —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É (–∑—Å—É–≤–Ω–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä):
        # –ü–µ—Ä—à—ñ n_phys - 3 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–æ–≤–æ–≥–æ —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —î –∑—Å—É–Ω—É—Ç–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        # (—Ç–æ–±—Ç–æ x_phys_new[i] = x_phys_prev[i+3]). –¶–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –æ–¥–∏–Ω–∏—á–Ω—É –º–∞—Ç—Ä–∏—Ü—é,
        # —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—É —Ç–∞–∫, —â–æ –µ–ª–µ–º–µ–Ω—Ç (i, i+3) –¥–æ—Ä—ñ–≤–Ω—é—î 1.
        self.F[:self.n_phys - 3, 3:self.n_phys] = np.eye(self.n_phys - 3)
        
        # –û—Å—Ç–∞–Ω–Ω—ñ 3 –µ–ª–µ–º–µ–Ω—Ç–∏ —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –≤ predict –º–µ—Ç–æ–¥—ñ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—é—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
        # d_measured —Ç–∞ u_prev (—è–∫—ñ —î –≤—Ö–æ–¥–∞–º–∏, –∞ –Ω–µ —á–∞—Å—Ç–∏–Ω–æ—é –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É).
        # –¢–æ–º—É —Ü—ñ —á–∞—Å—Ç–∏–Ω–∏ —è–∫–æ–±—ñ–∞–Ω–∞ (—Ä—è–¥–∫–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ü–∏–º –µ–ª–µ–º–µ–Ω—Ç–∞–º) —î –Ω—É–ª—å–æ–≤–∏–º–∏
        # –ø–æ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—é –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É. –¶–µ —î –∫–æ—Ä–µ–∫—Ç–Ω–∏–º –¥–ª—è –¥–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ.

        # –ë–ª–æ–∫ –¥–ª—è –∑–±—É—Ä–µ–Ω—å (–¥–∏—Å—Ç–æ—Ä–±–∞–Ω—Å—ñ–≤):
        # –ú–æ–¥–µ–ª—å —Ä—É—Ö—É –¥–ª—è –∑–±—É—Ä–µ–Ω—å: d_k = d_{k-1} (–≤–∏–ø–∞–¥–∫–æ–≤–µ –±–ª—É–∫–∞–Ω–Ω—è –∑ –Ω—É–ª—å–æ–≤–∏–º –∑–º—ñ—â–µ–Ω–Ω—è–º).
        # –¶–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –æ–¥–∏–Ω–∏—á–Ω–æ—é –º–∞—Ç—Ä–∏—Ü–µ—é –¥–ª—è –±–ª–æ–∫—É –∑–±—É—Ä–µ–Ω—å.
        self.F[self.n_phys:, self.n_phys:] = np.eye(self.n_dist)

    def predict(self, u_prev: float, d_measured: np.ndarray):
        """
        –ö—Ä–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É (prediction step) EKF.
        –û–±—á–∏—Å–ª—é—î a priori –æ—Ü—ñ–Ω–∫—É —Å—Ç–∞–Ω—É —Ç–∞ –∫–æ–≤–∞—Ä—ñ–∞—Ü—ñ—ó.

        Args:
            u_prev (float): –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –∫–µ—Ä–æ–≤–∞–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó.
            d_measured (np.ndarray): –í–µ–∫—Ç–æ—Ä –∑ –¥–≤–æ—Ö –≤–∏–º—ñ—Ä—è–Ω–∏—Ö –¥–∏—Å—Ç–æ—Ä–±–∞–Ω—Å—ñ–≤ (d_fe, d_mass).
        """
        x_phys_prev = self.x_hat[:self.n_phys]  # –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞ —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        d_prev = self.x_hat[self.n_phys:]       # –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞ –∑–±—É—Ä–µ–Ω—å

        # ---- 1. –ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–∞–Ω—É x_hat_k|k-1 = f(x_hat_{k-1|k-1}, u_{k-1})
        # –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥—É –¥–ª—è —Ñ—ñ–∑–∏—á–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ (–∑—Å—É–≤–Ω–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä):
        # –ó—Å—É–≤–∞—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –Ω–∞ 3 –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞–∑–∞–¥ (–≤–∏–∫–∏–¥–∞—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ 3 –µ–ª–µ–º–µ–Ω—Ç–∏)
        x_phys_new = np.roll(x_phys_prev, -3)
        # –û—Å—Ç–∞–Ω–Ω—ñ 3 –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–æ–≤–æ–≥–æ —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∑–∞–ø–æ–≤–Ω—é—é—Ç—å—Å—è –Ω–æ–≤–∏–º–∏ –≤–∏–º—ñ—Ä–∞–º–∏ (d_fe, d_mass) —Ç–∞ u_prev
        x_phys_new[-3:] = np.hstack([d_measured[0], d_measured[1], u_prev])
        
        # –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥—É –¥–ª—è –∑–±—É—Ä–µ–Ω—å: –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤–æ–Ω–∏ –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å—Å—è
        # (–º–æ–¥–µ–ª—å –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –±–ª—É–∫–∞–Ω–Ω—è –∑ –Ω—É–ª—å–æ–≤–∏–º –∑–º—ñ—â–µ–Ω–Ω—è–º)
        d_new = d_prev 
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω–∏–π —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å—Ç–∞–Ω
        self.x_hat = np.hstack([x_phys_new, d_new])
        
        # ---- 2. –ü—Ä–æ–≥–Ω–æ–∑ –∫–æ–≤–∞—Ä—ñ–∞—Ü—ñ—ó P_k|k-1 = F * P_{k-1|k-1} * F^T + Q
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–æ Q
        self.P = self.F @ self.P @ self.F.T + (self.Q * self.q_scale)
        


    def update(self, z_k: np.ndarray):
        """EKF update step with consistent scaling"""
        
        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        if self.use_scaled_state:
            # –í–µ—Å—å —Å—Ç–∞–Ω –≤–∂–µ –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º–æ —Ñ—ñ–∑–∏—á–Ω—É —á–∞—Å—Ç–∏–Ω—É
            x_phys_scaled = self.x_hat[:self.n_phys].reshape(1, -1)
            d_scaled = self.x_hat[self.n_phys:]
            
            # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–µ—Ä—à–∏—Ö –∫—Ä–æ–∫—ñ–≤
            if not hasattr(self, '_debug_count'):
                self._debug_count = 0
            
            if self._debug_count < 3:
                print(f"   üìä EKF step {self._debug_count}: Using SCALED state directly")
                print(f"      Physical state range: [{x_phys_scaled.min():.3f}, {x_phys_scaled.max():.3f}]")
                print(f"      Disturbances: [{d_scaled.min():.3f}, {d_scaled.max():.3f}]")
                self._debug_count += 1
            else:
                self._debug_count += 1
                
        else:
            # Legacy —Ä–µ–∂–∏–º: —Ñ—ñ–∑–∏—á–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –Ω–µ–º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–∞, –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏
            x_phys_unscaled = self.x_hat[:self.n_phys].reshape(1, -1)
            x_phys_scaled = self.x_scaler.transform(x_phys_unscaled)
            d_scaled = self.x_hat[self.n_phys:]
            
            if not hasattr(self, '_debug_count'):
                self._debug_count = 0
            
            if self._debug_count < 3:
                print(f"   ‚ö†Ô∏è  EKF step {self._debug_count}: Converting UNSCALED to scaled state")
                self._debug_count += 1
            else:
                self._debug_count += 1
        
        # ‚úÖ –û—Å–Ω–æ–≤–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è EKF (–±–µ–∑ –∑–º—ñ–Ω)
        W_local_scaled, _ = self.model.linearize(x_phys_scaled)
        
        H_k = np.zeros((self.n_dist, self.n_aug))
        start_idx = self.n_phys - 9  # –û—Å—Ç–∞–Ω–Ω—ñ 3 —Ç–æ—á–∫–∏ (9 –∑–Ω–∞—á–µ–Ω—å)
        H_k[:, start_idx:self.n_phys] = (
            np.diag(1.0 / self.y_scaler.scale_) @ W_local_scaled.T
        )
        H_k[:, self.n_phys:] = np.eye(self.n_dist)
        
        # –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –≤–∏—Ö–æ–¥—É
        y_pred_scaled = self.model.predict(x_phys_scaled)[0]
        y_pred_unscaled = self.y_scaler.inverse_transform(y_pred_scaled.reshape(1, -1))[0]
        
        # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        z_k_scaled = self.y_scaler.transform(z_k.reshape(1, -1))[0]
        
        # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó (–≤ –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö)
        y_k = z_k_scaled - (y_pred_scaled + d_scaled)
        self.last_innovation = y_k.copy()
        
        # –ö–æ–≤–∞—Ä—ñ–∞—Ü—ñ—è —ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—ó R
        S_k = H_k @ self.P @ H_k.T + self.R
        
        if hasattr(self, 'beta_R') and self.beta_R > 0:
            innovation_cov = np.outer(y_k, y_k)
            self.R = (1 - self.beta_R) * self.R + self.beta_R * innovation_cov
            self.R = np.maximum(self.R, self._R_initial * 0.1)
        
        # –ü—ñ–¥—Å–∏–ª–µ–Ω–Ω—è –ö–∞–ª–º–∞–Ω–∞
        try:
            K_k = self.P @ H_k.T @ np.linalg.inv(S_k)
        except np.linalg.LinAlgError:
            K_k = self.P @ H_k.T @ np.linalg.pinv(S_k)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ –∫–æ–≤–∞—Ä—ñ–∞—Ü—ñ—ó
        self.x_hat = self.x_hat + K_k @ y_k
        I_KH = np.eye(self.n_aug) - K_k @ H_k
        self.P = I_KH @ self.P @ I_KH.T + K_k @ self.R @ K_k.T
        
        # –ê–¥–∞–ø—Ç–∞—Ü—ñ—è Q –Ω–∞ –æ—Å–Ω–æ–≤—ñ NIS
        if self.q_adaptive_enabled:
            nis = y_k.T @ np.linalg.inv(S_k) @ y_k
            if nis > self.q_nis_threshold:
                self.q_scale = min(self.q_scale * 1.1, 5.0)
            else:
                self.q_scale = max(self.q_scale * self.q_alpha, 0.1)