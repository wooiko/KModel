# enhanced_simulator_runner.py - –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø—É—Å–∫—É —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞

import pandas as pd
import time
import json
from pathlib import Path
from typing import Dict, Any, Optional

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
from enhanced_sim import (
    simulate_mpc,
    quick_mpc_benchmark, 
    detailed_mpc_analysis,
    compare_mpc_configurations,
    simulate_mpc_with_config_enhanced
)

def load_historical_data() -> pd.DataFrame:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó"""
    
    # –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –º—ñ—Å—Ü—å
    possible_paths = [
        'processed.parquet',
        'data/processed.parquet', 
        '/content/KModel/src/processed.parquet',
        '../data/processed.parquet'
    ]
    
    for path in possible_paths:
        try:
            hist_df = pd.read_parquet(path)
            print(f"‚úÖ –î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑: {path}")
            print(f"   üìä –†–æ–∑–º—ñ—Ä: {hist_df.shape[0]} —Ä—è–¥–∫—ñ–≤, {hist_df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
            return hist_df
        except FileNotFoundError:
            continue
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ {path}: {e}")
            continue
    
    raise FileNotFoundError("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª processed.parquet")

def progress_callback(step: int, total: int, message: str):
    """Callback –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
    if step % 50 == 0 or step == total or '–∑–∞–≤–µ—Ä—à–µ–Ω' in message.lower():
        progress_pct = (step / total * 100) if total > 0 else 0
        print(f"   üìà [{step:4d}/{total:4d}] {progress_pct:5.1f}% - {message}")

def example_1_quick_benchmark():
    """üöÄ –ü—Ä–∏–∫–ª–∞–¥ 1: –®–≤–∏–¥–∫–∏–π –±–µ–Ω—á–º–∞—Ä–∫ —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π"""
    
    print("\n" + "="*70)
    print("üöÄ –ü–†–ò–ö–õ–ê–î 1: –®–í–ò–î–ö–ò–ô –ë–ï–ù–ß–ú–ê–†–ö –ú–û–î–ï–õ–ï–ô MPC")
    print("="*70)
    
    try:
        hist_df = load_historical_data()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —à–≤–∏–¥–∫–∏–π –±–µ–Ω—á–º–∞—Ä–∫
        models_to_test = ['krr', 'svr', 'linear']
        
        print(f"üß™ –¢–µ—Å—Ç—É—î–º–æ {len(models_to_test)} –º–æ–¥–µ–ª–µ–π...")
        start_time = time.time()
        
        results_df = quick_mpc_benchmark(
            hist_df=hist_df,
            config='oleksandr_original',
            models_to_test=models_to_test,
            save_results=True
        )
        
        total_time = time.time() - start_time
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –®–í–ò–î–ö–û–ì–û –ë–ï–ù–ß–ú–ê–†–ö–£:")
        print(f"   ‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"   üèÜ –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å: {results_df.iloc[0]['Model']}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        print(f"\nüèÖ –¢–û–ü-3 –ú–û–î–ï–õ–Ü:")
        top_3 = results_df.head(3)
        for idx, row in top_3.iterrows():
            rank = idx + 1
            medal = "ü•á" if rank == 1 else "ü•à" if rank == 2 else "ü•â"
            print(f"   {medal} {row['Model']}: RMSE_Fe={row['RMSE_Fe']:.4f}, "
                  f"–Ø–∫—ñ—Å—Ç—å={row['Quality_Score']:.3f}, "
                  f"–ß–∞—Å={row['Cycle_Time_Ms']:.1f}ms")
        
        return results_df
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–∏–∫–ª–∞–¥—ñ 1: {e}")
        return None

def example_2_detailed_analysis():
    """üî¨ –ü—Ä–∏–∫–ª–∞–¥ 2: –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    
    print("\n" + "="*70)
    print("üî¨ –ü–†–ò–ö–õ–ê–î 2: –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó MPC")
    print("="*70)
    
    try:
        hist_df = load_historical_data()
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        config_overrides = {
            'model_type': 'krr',
            'kernel': 'rbf',
            'Np': 8,
            'Nc': 6,
            'N_data': 3000,  # –ë—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            'control_pts': 500
        }
        
        print("üî¨ –ó–∞–ø—É—Å–∫–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑...")
        print(f"   üìã –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: {config_overrides}")
        
        start_time = time.time()
        
        analysis_report = detailed_mpc_analysis(
            hist_df=hist_df,
            config='oleksandr_original',
            config_overrides=config_overrides
        )
        
        analysis_time = time.time() - start_time
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢:")
        print(f"   ‚è±Ô∏è –ß–∞—Å –∞–Ω–∞–ª—ñ–∑—É: {analysis_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
        basic_metrics = analysis_report['basic_metrics']
        print(f"\nüìä –û–°–ù–û–í–ù–Ü –ú–ï–¢–†–ò–ö–ò:")
        for key, value in basic_metrics.items():
            if isinstance(value, (int, float)):
                print(f"   ‚Ä¢ {key}: {value:.6f}")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —à–≤–∏–¥–∫–æ—Å—Ç—ñ  
        speed_metrics = analysis_report['speed_metrics']
        print(f"\n‚ö° –®–í–ò–î–ö–û–î–Ü–Ø:")
        for key, value in speed_metrics.items():
            if isinstance(value, (int, float)):
                if 'time' in key.lower():
                    unit = "ms" if value < 1 else "—Å"
                    display_value = value * 1000 if value < 1 else value
                    print(f"   ‚Ä¢ {key}: {display_value:.2f}{unit}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        recommendations = analysis_report['recommendations']
        if recommendations:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á ({len(recommendations)}):")
            for i, rec in enumerate(recommendations, 1):
                print(f"   {i}. {rec}")
        else:
            print(f"\n‚úÖ –°–ò–°–¢–ï–ú–ê –ü–†–ê–¶–Æ–Ñ –û–ü–¢–ò–ú–ê–õ–¨–ù–û!")
        
        return analysis_report
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–∏–∫–ª–∞–¥—ñ 2: {e}")
        return None

def example_3_custom_simulation():
    """üéØ –ü—Ä–∏–∫–ª–∞–¥ 3: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—è –∑ –±–µ–Ω—á–º–∞—Ä–∫–æ–º"""
    
    print("\n" + "="*70)
    print("üéØ –ü–†–ò–ö–õ–ê–î 3: –ö–û–†–ò–°–¢–£–í–ê–¶–¨–ö–ê –°–ò–ú–£–õ–Ø–¶–Ü–Ø –ó –ë–ï–ù–ß–ú–ê–†–ö–û–ú")
    print("="*70)
    
    try:
        hist_df = load_historical_data()
        
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        custom_config = {
            'model_type': 'gpr',  # Gaussian Process Regression
            'kernel': 'rbf',
            'Np': 10,  # –ë—ñ–ª—å—à–∏–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
            'Nc': 8,   # –ë—ñ–ª—å—à–∏–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –∫–µ—Ä—É–≤–∞–Ω–Ω—è
            'w_fe': 10.0,  # –ë—ñ–ª—å—à–∞ –≤–∞–≥–∞ –¥–ª—è Fe
            'w_mass': 1.5,
            'Œª_obj': 0.05,  # –ú–µ–Ω—à–µ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è
            'ref_fe': 54.0,  # –í–∏—â–∞ —É—Å—Ç–∞–≤–∫–∞ Fe
            'ref_mass': 58.0,
            'N_data': 4000,
            'control_pts': 800,
            'find_optimal_params': True  # –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≥—ñ–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        }
        
        print("üéØ –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—É —Å–∏–º—É–ª—è—Ü—ñ—é...")
        print(f"   üìã –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:")
        print(f"      ‚Ä¢ –ú–æ–¥–µ–ª—å: {custom_config['model_type'].upper()}")
        print(f"      ‚Ä¢ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∏: Np={custom_config['Np']}, Nc={custom_config['Nc']}")
        print(f"      ‚Ä¢ –£—Å—Ç–∞–≤–∫–∏: Fe={custom_config['ref_fe']}, Mass={custom_config['ref_mass']}")
        print(f"      ‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≥—ñ–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: ‚úÖ")
        
        start_time = time.time()
        
        results_df, metrics = simulate_mpc(
            hist_df,
            config='oleksandr_original',
            config_overrides=custom_config,
            # üÜï –£–≤—ñ–º–∫–Ω—É—Ç—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–Ω—á–º–∞—Ä–∫—É
            enable_comprehensive_analysis=True,
            benchmark_control_quality=True,
            save_benchmark_results=True,
            progress_callback=progress_callback
        )
        
        simulation_time = time.time() - start_time
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ö–û–†–ò–°–¢–£–í–ê–¶–¨–ö–û–á –°–ò–ú–£–õ–Ø–¶–Ü–á:")
        print(f"   ‚è±Ô∏è –ß–∞—Å —Å–∏–º—É–ª—è—Ü—ñ—ó: {simulation_time/60:.1f} —Ö–≤–∏–ª–∏–Ω")
        print(f"   üìä –¢–æ—á–æ–∫ –¥–∞–Ω–∏—Ö: {len(results_df)}")
        
        # –ö–ª—é—á–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        key_results = {
            'RMSE Fe': metrics.get('test_rmse_conc_fe', 'N/A'),
            'RMSE Mass': metrics.get('test_rmse_conc_mass', 'N/A'), 
            'R¬≤ Fe': metrics.get('r2_fe', 'N/A'),
            'R¬≤ Mass': metrics.get('r2_mass', 'N/A'),
            '–Ø–∫—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è': metrics.get('quality_score', 'N/A'),
            '–ß–∞—Å —Ü–∏–∫–ª—É (ms)': metrics.get('total_cycle_time', 0) * 1000,
            'Real-time –ø—Ä–∏–¥–∞—Ç–Ω—ñ—Å—Ç—å': metrics.get('real_time_suitable', False)
        }
        
        print(f"\nüìà –ö–õ–Æ–ß–û–í–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
        for key, value in key_results.items():
            if isinstance(value, (int, float)):
                if 'R¬≤' in key:
                    print(f"   ‚Ä¢ {key}: {value:.4f}")
                elif 'RMSE' in key or '–Ø–∫—ñ—Å—Ç—å' in key:
                    print(f"   ‚Ä¢ {key}: {value:.6f}")
                elif 'ms' in key:
                    print(f"   ‚Ä¢ {key}: {value:.1f}")
                else:
                    print(f"   ‚Ä¢ {key}: {value}")
            else:
                print(f"   ‚Ä¢ {key}: {value}")
        
        # –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        print(f"\nüîç –ê–ù–ê–õ–Ü–ó:")
        
        # –Ø–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ
        rmse_fe = metrics.get('test_rmse_conc_fe', float('inf'))
        if rmse_fe < 0.05:
            print(f"   ‚úÖ –í—ñ–¥–º—ñ–Ω–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ Fe (RMSE < 0.05)")
        elif rmse_fe < 0.1:
            print(f"   üëç –•–æ—Ä–æ—à–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ Fe (RMSE < 0.1)")
        else:
            print(f"   ‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–æ—á–Ω–æ—Å—Ç—ñ Fe (RMSE > 0.1)")
        
        # –®–≤–∏–¥–∫–æ–¥—ñ—è
        cycle_time = metrics.get('total_cycle_time', 0) * 1000
        if cycle_time < 1000:  # < 1 —Å–µ–∫—É–Ω–¥–∏
            print(f"   ‚ö° –í—ñ–¥–º—ñ–Ω–Ω–∞ —à–≤–∏–¥–∫–æ–¥—ñ—è ({cycle_time:.0f}ms)")
        elif cycle_time < 5000:  # < 5 —Å–µ–∫—É–Ω–¥
            print(f"   üëç –ü—Ä–∏–π–Ω—è—Ç–Ω–∞ —à–≤–∏–¥–∫–æ–¥—ñ—è –¥–ª—è real-time ({cycle_time:.0f}ms)")
        else:
            print(f"   üêå –ü–æ–≤—ñ–ª—å–Ω–∞ —à–≤–∏–¥–∫–æ–¥—ñ—è ({cycle_time:.0f}ms)")
        
        # –Ø–∫—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        quality_score = metrics.get('quality_score', 1.0)
        if quality_score < 0.3:
            print(f"   üéØ –í—ñ–¥–º—ñ–Ω–Ω–∞ —è–∫—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è")
        elif quality_score < 0.5:
            print(f"   üëç –•–æ—Ä–æ—à–∞ —è–∫—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è")
        else:
            print(f"   ‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ MPC")
        
        return results_df, metrics
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–∏–∫–ª–∞–¥—ñ 3: {e}")
        return None, None

def example_4_model_comparison():
    """üîÑ –ü—Ä–∏–∫–ª–∞–¥ 4: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"""
    
    print("\n" + "="*70)
    print("üîÑ –ü–†–ò–ö–õ–ê–î 4: –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–ô MPC")
    print("="*70)
    
    try:
        hist_df = load_historical_data()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        configurations = [
            {
                'name': 'KRR_Conservative',
                'model_type': 'krr',
                'kernel': 'rbf', 
                'Np': 6,
                'Nc': 4,
                'Œª_obj': 0.2,  # –ë—ñ–ª—å—à–µ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è
                'w_fe': 5.0,
                'w_mass': 1.0
            },
            {
                'name': 'KRR_Aggressive', 
                'model_type': 'krr',
                'kernel': 'rbf',
                'Np': 8,
                'Nc': 6,
                'Œª_obj': 0.05,  # –ú–µ–Ω—à–µ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è
                'w_fe': 10.0,   # –ë—ñ–ª—å—à–∞ –≤–∞–≥–∞ Fe
                'w_mass': 1.5
            },
            {
                'name': 'SVR_Balanced',
                'model_type': 'svr',
                'kernel': 'rbf',
                'Np': 7,
                'Nc': 5,
                'Œª_obj': 0.1,
                'w_fe': 7.0,
                'w_mass': 1.2
            },
            {
                'name': 'Linear_Fast',
                'model_type': 'linear',
                'linear_type': 'ridge',
                'Np': 10,  # –ú–æ–∂–µ–º–æ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –±—ñ–ª—å—à–∏–π –≥–æ—Ä–∏–∑–æ–Ω—Ç
                'Nc': 8,
                'Œª_obj': 0.15,
                'w_fe': 6.0,
                'w_mass': 1.0
            }
        ]
        
        print(f"üîÑ –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ {len(configurations)} –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π...")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        for i, config in enumerate(configurations, 1):
            print(f"   {i}. {config['name']}: {config['model_type']} "
                  f"(Np={config['Np']}, Œª={config['Œª_obj']})")
        
        start_time = time.time()
        
        comparison_df = compare_mpc_configurations(
            configurations=configurations,
            hist_df=hist_df,
            base_config='oleksandr_original',
            comparison_steps=100  # –ö–æ—Ä–æ—Ç—à—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        )
        
        comparison_time = time.time() - start_time
        
        print(f"\nüîÑ –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø:")
        print(f"   ‚è±Ô∏è –ß–∞—Å –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {comparison_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        if not comparison_df.empty:
            print(f"\nüèÜ –†–ï–ô–¢–ò–ù–ì –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–ô:")
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —è–∫—ñ—Å—Ç—é –∞–±–æ RMSE
            if 'Quality_Score' in comparison_df.columns:
                comparison_df = comparison_df.sort_values('Quality_Score', na_position=True)
                sort_metric = 'Quality_Score'
            elif 'RMSE_Fe' in comparison_df.columns:
                comparison_df = comparison_df.sort_values('RMSE_Fe', na_position=True)
                sort_metric = 'RMSE_Fe'
            else:
                sort_metric = 'Configuration'
            
            for idx, row in comparison_df.iterrows():
                rank = idx + 1
                medal = "ü•á" if rank == 1 else "ü•à" if rank == 2 else "ü•â" if rank == 3 else f"{rank}."
                
                config_name = row['Configuration']
                rmse_fe = row.get('RMSE_Fe', 'N/A')
                quality = row.get('Quality_Score', 'N/A')
                cycle_time = row.get('Total_Cycle_Time', 'N/A')
                
                print(f"   {medal} {config_name}:")
                if isinstance(rmse_fe, (int, float)):
                    print(f"       RMSE Fe: {rmse_fe:.4f}")
                if isinstance(quality, (int, float)):
                    print(f"       –Ø–∫—ñ—Å—Ç—å: {quality:.3f}")
                if isinstance(cycle_time, (int, float)):
                    print(f"       –ß–∞—Å —Ü–∏–∫–ª—É: {cycle_time*1000:.1f}ms")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
            best_config = comparison_df.iloc[0]
            print(f"   üèÜ –ù–∞–π–∫—Ä–∞—â–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: {best_config['Configuration']}")
            
            if isinstance(best_config.get('RMSE_Fe'), (int, float)):
                if best_config['RMSE_Fe'] < 0.05:
                    print(f"   ‚úÖ –í—ñ–¥–º—ñ–Ω–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å - —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω")
                else:
                    print(f"   ‚ö†Ô∏è –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
        return comparison_df
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–∏–∫–ª–∞–¥—ñ 4: {e}")
        return None

def save_experiment_summary(results: Dict[str, Any]):
    """üíæ –ó–±–µ—Ä—ñ–≥–∞—î –ø—ñ–¥—Å—É–º–æ–∫ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É"""
    
    timestamp = pd.Timestamp.now().strftime("%Y%m%d_%H%M%S")
    filename = f"experiment_summary_{timestamp}.json"
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    summary = {
        'timestamp': pd.Timestamp.now().isoformat(),
        'experiments_conducted': len(results),
        'results': {}
    }
    
    for exp_name, exp_result in results.items():
        if exp_result is not None:
            if isinstance(exp_result, pd.DataFrame):
                # DataFrame -> dict
                summary['results'][exp_name] = {
                    'type': 'dataframe',
                    'shape': exp_result.shape,
                    'columns': list(exp_result.columns),
                    'data_sample': exp_result.head().to_dict() if not exp_result.empty else {}
                }
            elif isinstance(exp_result, dict):
                # Dict -> –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
                summary['results'][exp_name] = {
                    'type': 'dict',
                    'keys': list(exp_result.keys()),
                    'sample_data': {k: str(v)[:100] for k, v in exp_result.items() if k != 'comprehensive_analysis'}
                }
            else:
                summary['results'][exp_name] = {
                    'type': str(type(exp_result)),
                    'value': str(exp_result)[:200]
                }
        else:
            summary['results'][exp_name] = {
                'type': 'none',
                'status': 'failed'
            }
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2, ensure_ascii=False)
        print(f"üíæ –ü—ñ–¥—Å—É–º–æ–∫ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫—É: {e}")

def main():
    """üöÄ –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤"""
    
    print("üî¨ –†–û–ó–®–ò–†–ï–ù–ò–ô –°–ò–ú–£–õ–Ø–¢–û–† MPC –ó –ë–ï–ù–ß–ú–ê–†–ö–û–ú")
    print("="*70)
    print("üéØ –î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏:")
    print("   1. üöÄ –®–≤–∏–¥–∫–∏–π –±–µ–Ω—á–º–∞—Ä–∫ –º–æ–¥–µ–ª–µ–π")
    print("   2. üî¨ –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ MPC")
    print("   3. üéØ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—è")
    print("   4. üîÑ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π")
    print("   5. üèÉ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏")
    print("="*70)
    
    try:
        # –ú–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥
        choice = input("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ (1-5) –∞–±–æ Enter –¥–ª—è –≤—Å—ñ—Ö: ").strip()
        
        if not choice:
            choice = "5"  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        
        results = {}
        total_start_time = time.time()
        
        if choice in ["1", "5"]:
            print(f"\n{'üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–ö–õ–ê–î–£ 1' if choice == '1' else 'üöÄ –ü–†–ò–ö–õ–ê–î 1/4'}")
            results['quick_benchmark'] = example_1_quick_benchmark()
        
        if choice in ["2", "5"]:
            print(f"\n{'üî¨ –ó–ê–ü–£–°–ö –ü–†–ò–ö–õ–ê–î–£ 2' if choice == '2' else 'üî¨ –ü–†–ò–ö–õ–ê–î 2/4'}")
            results['detailed_analysis'] = example_2_detailed_analysis()
        
        if choice in ["3", "5"]:
            print(f"\n{'üéØ –ó–ê–ü–£–°–ö –ü–†–ò–ö–õ–ê–î–£ 3' if choice == '3' else 'üéØ –ü–†–ò–ö–õ–ê–î 3/4'}")
            results['custom_simulation'] = example_3_custom_simulation()
        
        if choice in ["4", "5"]:
            print(f"\n{'üîÑ –ó–ê–ü–£–°–ö –ü–†–ò–ö–õ–ê–î–£ 4' if choice == '4' else 'üîÑ –ü–†–ò–ö–õ–ê–î 4/4'}")
            results['configuration_comparison'] = example_4_model_comparison()
        
        total_time = time.time() - total_start_time
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        print(f"\n" + "="*70)
        print(f"üéâ –ï–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ò –ó–ê–í–ï–†–®–ï–ù–û")
        print(f"="*70)
        print(f"‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {total_time/60:.1f} —Ö–≤–∏–ª–∏–Ω")
        print(f"üìä –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ñ–≤: {len([r for r in results.values() if r is not None])}")
        
        success_count = len([r for r in results.values() if r is not None])
        total_count = len(results)
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: {success_count}/{total_count}")
        
        if success_count > 0:
            print(f"\nüìÅ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏:")
            print(f"   ‚Ä¢ CSV —Ñ–∞–π–ª–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±–µ–Ω—á–º–∞—Ä–∫—É")
            print(f"   ‚Ä¢ JSON —Ñ–∞–π–ª–∏ –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏")
            print(f"   ‚Ä¢ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
        if results:
            save_experiment_summary(results)
        
        print(f"\nüí° –ü–û–†–ê–î–ò:")
        print(f"   ‚Ä¢ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        print(f"   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –±–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
        print(f"   ‚Ä¢ –ù–∞–ª–∞—à—Ç–æ–≤—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ MPC –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
        
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()