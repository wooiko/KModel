# evaluation_simple.py - –ü—Ä–æ—Å—Ç–∏–π –º–æ–¥—É–ª—å –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ MPC-—Å–∏–º—É–ª—è—Ç–æ—Ä–∞

import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score
from dataclasses import dataclass

# =============================================================================
# === –°–¢–†–£–ö–¢–£–†–ò –î–ê–ù–ò–• ===
# =============================================================================

@dataclass
class EvaluationResults:
    """–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å—ñ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è"""
    # –ú–æ–¥–µ–ª—å (6 –º–µ—Ç—Ä–∏–∫)
    model_rmse_fe: float
    model_rmse_mass: float
    model_r2_fe: float
    model_r2_mass: float
    model_bias_fe: float
    model_bias_mass: float
    
    # –ö–µ—Ä—É–≤–∞–Ω–Ω—è (9 –º–µ—Ç—Ä–∏–∫)
    tracking_error_fe: float
    tracking_error_mass: float
    control_smoothness: float
    setpoint_achievement_fe: float  # % —á–∞—Å—É –≤ –º–µ–∂–∞—Ö —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—ñ
    setpoint_achievement_mass: float
    # –î–æ–¥–∞—î–º–æ ISE/IAE –º–µ—Ç—Ä–∏–∫–∏
    ise_fe: float           # Integral of Squared Error –¥–ª—è Fe
    ise_mass: float         # Integral of Squared Error –¥–ª—è Mass
    iae_fe: float           # Integral of Absolute Error –¥–ª—è Fe
    iae_mass: float         # Integral of Absolute Error –¥–ª—è Mass
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (2 –º–µ—Ç—Ä–∏–∫–∏)
    overall_score: float
    process_stability: float
    
    control_aggressiveness: float           # mean_delta_u –∞–±–æ mean_abs_nonzero_delta_u
    control_variability: float              # std_delta_u
    control_energy: float                   # energy_u
    control_stability_index: float          # 1 - directional_switch_frequency
    control_utilization: float              # percentage_of_max_delta_u_used
    significant_changes_frequency: float    # significant_magnitude_changes_frequency
    significant_changes_count: float        # significant_magnitude_changes_count
    max_control_change: float               # max_abs_delta_u
    directional_switches_per_step: float    # directional_switch_frequency
    directional_switches_count: float       # directional_switch_count
    steps_at_max_delta_u: float            # num_steps_at_delta_u_max

    def to_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –≤ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ"""
        return {
            'model_rmse_fe': self.model_rmse_fe,
            'model_rmse_mass': self.model_rmse_mass,
            'model_r2_fe': self.model_r2_fe,
            'model_r2_mass': self.model_r2_mass,
            'model_bias_fe': self.model_bias_fe,
            'model_bias_mass': self.model_bias_mass,
            'tracking_error_fe': self.tracking_error_fe,
            'tracking_error_mass': self.tracking_error_mass,
            'control_smoothness': self.control_smoothness,
            'setpoint_achievement_fe': self.setpoint_achievement_fe,
            'setpoint_achievement_mass': self.setpoint_achievement_mass,
            'ise_fe': self.ise_fe,
            'ise_mass': self.ise_mass,
            'iae_fe': self.iae_fe,
            'iae_mass': self.iae_mass,
            'overall_score': self.overall_score,
            'process_stability': self.process_stability,
            'control_aggressiveness': self.control_aggressiveness,
            'control_variability': self.control_variability,
            'control_energy': self.control_energy,
            'control_stability_index': self.control_stability_index,
            'control_utilization': self.control_utilization,
            'significant_changes_frequency': self.significant_changes_frequency,
            'significant_changes_count': self.significant_changes_count,
            'max_control_change': self.max_control_change,
            'directional_switches_per_step': self.directional_switches_per_step,
            'directional_switches_count': self.directional_switches_count,
            'steps_at_max_delta_u': self.steps_at_max_delta_u
        }

# =============================================================================
# === –§–£–ù–ö–¶–Ü–á –û–¶–Ü–ù–Æ–í–ê–ù–ù–Ø –ú–û–î–ï–õ–ï–ô ===
# =============================================================================

def evaluate_model_performance(results_df: pd.DataFrame, analysis_data: Dict) -> Dict[str, float]:
    """–û—Ü—ñ–Ω—é—î —è–∫—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è"""
    
    # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    y_true = analysis_data.get('y_true_seq', [])
    y_pred = analysis_data.get('y_pred_seq', [])
    
    if not y_true or not y_pred:
        # Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó EKF —è–∫ –ø—Ä–æ–∫—Å—ñ –¥–ª—è –ø–æ–º–∏–ª–æ–∫ –º–æ–¥–µ–ª—ñ
        print("‚ö†Ô∏è –ü—Ä—è–º—ñ –¥–∞–Ω—ñ –º–æ–¥–µ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ EKF —ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó")
        innovations = analysis_data.get('innov', np.array([]))
        
        if len(innovations) > 0:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó —è–∫ –æ—Ü—ñ–Ω–∫—É –ø–æ–º–∏–ª–∫–∏ –º–æ–¥–µ–ª—ñ
            rmse_fe = np.sqrt(np.mean(innovations[:, 0]**2))
            rmse_mass = np.sqrt(np.mean(innovations[:, 1]**2))
            
            # –û—Ü—ñ–Ω—é—î–º–æ R¬≤ —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ä—Å—ñ—é —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π
            fe_values = results_df['conc_fe'].values
            mass_values = results_df['conc_mass'].values
            
            r2_fe = max(0, 1 - np.var(innovations[:len(fe_values), 0]) / np.var(fe_values))
            r2_mass = max(0, 1 - np.var(innovations[:len(mass_values), 1]) / np.var(mass_values))
            
            bias_fe = np.mean(innovations[:, 0])
            bias_mass = np.mean(innovations[:, 1])
        else:
            # –Ø–∫—â–æ –≤–∑–∞–≥–∞–ª—ñ –Ω–µ–º–∞ –¥–∞–Ω–∏—Ö
            rmse_fe = rmse_mass = 0.0
            r2_fe = r2_mass = 0.0
            bias_fe = bias_mass = 0.0
    else:
        # –û—Å–Ω–æ–≤–Ω–∏–π —à–ª—è—Ö: —î –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å
        y_true = np.array(y_true)
        y_pred = np.array(y_pred)
        
        # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ –æ–¥–Ω–∞–∫–æ–≤–æ—ó –¥–æ–≤–∂–∏–Ω–∏
        min_len = min(len(y_true), len(y_pred))
        y_true = y_true[:min_len]
        y_pred = y_pred[:min_len]
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –¥–ª—è Fe (–∫–æ–ª–æ–Ω–∫–∞ 0)
        rmse_fe = np.sqrt(mean_squared_error(y_true[:, 0], y_pred[:, 0]))
        r2_fe = r2_score(y_true[:, 0], y_pred[:, 0])
        bias_fe = np.mean(y_pred[:, 0] - y_true[:, 0])
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –¥–ª—è Mass (–∫–æ–ª–æ–Ω–∫–∞ 1)
        rmse_mass = np.sqrt(mean_squared_error(y_true[:, 1], y_pred[:, 1]))
        r2_mass = r2_score(y_true[:, 1], y_pred[:, 1])
        bias_mass = np.mean(y_pred[:, 1] - y_true[:, 1])
    
    return {
        'model_rmse_fe': rmse_fe,
        'model_rmse_mass': rmse_mass,
        'model_r2_fe': r2_fe,
        'model_r2_mass': r2_mass,
        'model_bias_fe': bias_fe,
        'model_bias_mass': bias_mass
    }

# =============================================================================
# === –§–£–ù–ö–¶–Ü–á –û–¶–Ü–ù–Æ–í–ê–ù–ù–Ø –ö–ï–†–£–í–ê–ù–ù–Ø ===
# =============================================================================

def evaluate_control_performance(results_df: pd.DataFrame, params: Dict) -> Dict[str, float]:
    """–û—Ü—ñ–Ω—é—î —è–∫—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è"""
    
    # –£—Å—Ç–∞–≤–∫–∏
    ref_fe = params.get('ref_fe', 53.5)
    ref_mass = params.get('ref_mass', 57.0)
    
    # ‚úÖ –ù–ê–°–¢–†–û–Æ–í–ê–ù–Ü –¢–û–õ–ï–†–ê–ù–¢–ù–û–°–¢–Ü
    tolerance_fe_percent = params.get('tolerance_fe_percent', 2.0)    
    tolerance_mass_percent = params.get('tolerance_mass_percent', 2.0) 
    
    # –§–∞–∫—Ç–∏—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    fe_values = results_df['conc_fe'].values
    mass_values = results_df['conc_mass'].values
    control_values = results_df['solid_feed_percent'].values
    
    # –ü–æ–º–∏–ª–∫–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
    error_fe = fe_values - ref_fe
    error_mass = mass_values - ref_mass
    
    # 1. –ü–æ–º–∏–ª–∫–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è (RMSE –≤—ñ–¥ —É—Å—Ç–∞–≤–∫–∏) - ‚úÖ –ó–ê–õ–ò–®–ê–Ñ–¢–¨–°–Ø
    tracking_error_fe = np.sqrt(np.mean(error_fe**2))
    tracking_error_mass = np.sqrt(np.mean(error_mass**2))
    
    # 2. ISE (Integral of Squared Error) - ‚úÖ –ó–ê–õ–ò–®–ê–Ñ–¢–¨–°–Ø
    ise_fe = np.sum(error_fe**2)
    ise_mass = np.sum(error_mass**2)
    
    # 3. IAE (Integral of Absolute Error) - ‚úÖ –ó–ê–õ–ò–®–ê–Ñ–¢–¨–°–Ø
    iae_fe = np.sum(np.abs(error_fe))
    iae_mass = np.sum(np.abs(error_mass))
    
    # 4. –ó–≥–ª–∞–¥–∂–µ–Ω—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è - ‚úÖ –ó–ê–õ–ò–®–ê–Ñ–¢–¨–°–Ø
    control_changes = np.diff(control_values)
    control_smoothness = 1 / (1 + np.std(control_changes))
    
    # 5. –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è —É—Å—Ç–∞–≤–æ–∫ –∑ –Ω–∞—Å—Ç—Ä–æ—é–≤–∞–Ω–∏–º–∏ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—è–º–∏
    tolerance_fe = (tolerance_fe_percent / 100.0) * abs(ref_fe)
    tolerance_mass = (tolerance_mass_percent / 100.0) * abs(ref_mass)
    
    # ‚úÖ –í–ò–î–ê–õ–ò–¢–ò –¢–Ü–õ–¨–ö–ò –¶–Ü 4 –ó–ê–ô–í–Ü PRINT-–ò (–∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ç–µ–∫—Å—Ç—É):
    # print(f"\nüéØ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —É—Å—Ç–∞–≤–æ–∫:")
    # print(f"   ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—ñ:")
    # print(f"      Fe: {tolerance_fe_percent}% –≤—ñ–¥ —É—Å—Ç–∞–≤–∫–∏ = ¬±{tolerance_fe:.3f}")
    # print(f"      Mass: {tolerance_mass_percent}% –≤—ñ–¥ —É—Å—Ç–∞–≤–∫–∏ = ¬±{tolerance_mass:.3f}")
    
    setpoint_achievement_fe = calculate_setpoint_achievement(fe_values, ref_fe, tolerance_fe)
    setpoint_achievement_mass = calculate_setpoint_achievement(mass_values, ref_mass, tolerance_mass)
    
    delta_u_max = params.get('delta_u_max', 1.0)
    aggressiveness_metrics = calculate_control_aggressiveness_metrics(control_values, delta_u_max)
    
    return {
        'tracking_error_fe': tracking_error_fe,
        'tracking_error_mass': tracking_error_mass,
        'ise_fe': ise_fe,
        'ise_mass': ise_mass,
        'iae_fe': iae_fe,
        'iae_mass': iae_mass,
        'control_smoothness': control_smoothness,
        'setpoint_achievement_fe': setpoint_achievement_fe,
        'setpoint_achievement_mass': setpoint_achievement_mass,
        **aggressiveness_metrics  # ‚úÖ –î–æ–¥–∞—î–º–æ –≤—Å—ñ –º–µ—Ç—Ä–∏–∫–∏ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ—Å—Ç—ñ
    }

def calculate_control_aggressiveness_metrics(control_values: np.ndarray, 
                                           delta_u_max: float) -> Dict[str, float]:
    """
    –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –º–µ—Ç—Ä–∏–∫–∏ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ—Å—Ç—ñ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É
    """
    
    # –û–±—á–∏—Å–ª—é—î–º–æ –∑–º—ñ–Ω–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    delta_u = np.diff(control_values)
    abs_delta_u = np.abs(delta_u)
    nonzero_delta_u = abs_delta_u[abs_delta_u > 1e-8]
    
    # 1. –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    mean_delta_u = np.mean(abs_delta_u) if len(abs_delta_u) > 0 else 0.0
    std_delta_u = np.std(delta_u) if len(delta_u) > 0 else 0.0
    max_abs_delta_u = np.max(abs_delta_u) if len(abs_delta_u) > 0 else 0.0
    mean_abs_nonzero_delta_u = np.mean(nonzero_delta_u) if len(nonzero_delta_u) > 0 else 0.0
    
    # 2. –ï–Ω–µ—Ä–≥—ñ—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    energy_u = np.sum(delta_u**2)
    
    # 3. –ó–Ω–∞—á–Ω—ñ –∑–º—ñ–Ω–∏ (> 50% –≤—ñ–¥ max)
    significant_threshold = 0.5 * delta_u_max
    significant_magnitude_changes_count = np.sum(abs_delta_u > significant_threshold)
    significant_magnitude_changes_frequency = significant_magnitude_changes_count / len(delta_u) if len(delta_u) > 0 else 0.0
    
    # 4. –ó–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É
    directional_switch_count = 0
    for i in range(1, len(delta_u)):
        if np.sign(delta_u[i]) != np.sign(delta_u[i-1]) and abs(delta_u[i]) > 1e-8 and abs(delta_u[i-1]) > 1e-8:
            directional_switch_count += 1
    
    directional_switch_frequency = directional_switch_count / len(delta_u) if len(delta_u) > 0 else 0.0
    
    # 5. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–∞–∫—Å–∏–º—É–º—É
    percentage_of_max_delta_u_used = (mean_delta_u / delta_u_max * 100) if delta_u_max > 0 else 0.0
    num_steps_at_delta_u_max = np.sum(abs_delta_u >= 0.95 * delta_u_max)
    
    return {
        'control_aggressiveness': mean_abs_nonzero_delta_u,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ nonzero —è–∫ —É –≤–∞—Å
        'control_variability': std_delta_u,
        'control_energy': energy_u,
        'control_stability_index': 1.0 - directional_switch_frequency,
        'control_utilization': percentage_of_max_delta_u_used,
        'significant_changes_frequency': significant_magnitude_changes_frequency,
        'significant_changes_count': float(significant_magnitude_changes_count),
        'max_control_change': max_abs_delta_u,
        'directional_switches_per_step': directional_switch_frequency,
        'directional_switches_count': float(directional_switch_count),
        'steps_at_max_delta_u': float(num_steps_at_delta_u_max)
    }

def calculate_setpoint_achievement(values: np.ndarray, setpoint: float, tolerance: float) -> float:
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤—ñ–¥—Å–æ—Ç–æ–∫ —á–∞—Å—É, –∫–æ–ª–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —É—Å—Ç–∞–≤–∫–∏"""
    within_tolerance = np.abs(values - setpoint) <= tolerance
    achievement_pct = np.mean(within_tolerance) * 100.0
    
    # ‚úÖ –î–û–î–ê–Ñ–ú–û –î–Ü–ê–ì–ù–û–°–¢–ò–ö–£
    # print(f"   üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å—Ç–∞–≤–∫–∏:")
    # print(f"      –£—Å—Ç–∞–≤–∫–∞: {setpoint:.2f}")
    # print(f"      –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ñ—Å—Ç—å: ¬±{tolerance:.2f}")
    # print(f"      –î—ñ–∞–ø–∞–∑–æ–Ω –¥–æ–ø—É—Å–∫—É: [{setpoint-tolerance:.2f}, {setpoint+tolerance:.2f}]")
    # print(f"      –§–∞–∫—Ç–∏—á–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω: [{np.min(values):.2f}, {np.max(values):.2f}]")
    # print(f"      –¢–æ—á–æ–∫ –≤ –¥–æ–ø—É—Å–∫—É: {np.sum(within_tolerance)}/{len(values)}")
    print(f"      –£—Å—Ç–∞–≤–∫–∞ {setpoint:.1f} ¬±{tolerance:.2f}: {np.sum(within_tolerance)}/{len(values)} —Ç–æ—á–æ–∫ ({achievement_pct:.1f}%)")

    return achievement_pct

# =============================================================================
# === –§–£–ù–ö–¶–Ü–á –ó–ê–ì–ê–õ–¨–ù–û–ì–û –û–¶–Ü–ù–Æ–í–ê–ù–ù–Ø ===
# =============================================================================

def calculate_overall_metrics(results_df: pd.DataFrame, params: Dict, 
                            model_metrics: Dict, control_metrics: Dict) -> Dict[str, float]:
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    
    # 1. –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—É (–æ–±–µ—Ä–Ω–µ–Ω–∞ –¥–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –≤–∞—Ä—ñ–∞—Ü—ñ—ó)
    fe_values = results_df['conc_fe'].values
    mass_values = results_df['conc_mass'].values
    
    fe_cv = np.std(fe_values) / (np.mean(fe_values) + 1e-8)
    mass_cv = np.std(mass_values) / (np.mean(mass_values) + 1e-8)
    process_stability = 1 / (1 + (fe_cv + mass_cv) / 2)
    
    # 2. –ó–∞–≥–∞–ª—å–Ω–∏–π score (–∑–≤–∞–∂–µ–Ω–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è –º–µ—Ç—Ä–∏–∫)
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ [0, 1]
    
    # –ú–æ–¥–µ–ª—å: R¬≤ –≤–∂–µ –≤ [0, 1], –±—ñ–ª—å—à–µ = –∫—Ä–∞—â–µ
    model_score = (max(0, model_metrics['model_r2_fe']) + 
                   max(0, model_metrics['model_r2_mass'])) / 2
    
    # –ö–µ—Ä—É–≤–∞–Ω–Ω—è: –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —É—Å—Ç–∞–≤–æ–∫ –≤ [0, 100], –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–æ [0, 1]
    control_score = (control_metrics['setpoint_achievement_fe'] + 
                     control_metrics['setpoint_achievement_mass']) / 200
    
    # –ó–≥–ª–∞–¥–∂–µ–Ω—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∂–µ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
    smoothness_score = min(1.0, control_metrics['control_smoothness'])
    
    # –ó–≤–∞–∂–µ–Ω–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è
    overall_score = (0.4 * model_score +      # 40% - —è–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ
                     0.4 * control_score +    # 40% - –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —É—Å—Ç–∞–≤–æ–∫  
                     0.2 * smoothness_score   # 20% - –∑–≥–ª–∞–¥–∂–µ–Ω—ñ—Å—Ç—å
                    ) * 100  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–æ [0, 100]
    
    return {
        'overall_score': overall_score,
        'process_stability': process_stability
    }

# =============================================================================
# === –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –û–¶–Ü–ù–Æ–í–ê–ù–ù–Ø ===
# =============================================================================

def evaluate_simulation(results_df: pd.DataFrame, analysis_data: Dict, 
                       params: Dict) -> EvaluationResults:
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å–∏–º—É–ª—è—Ü—ñ—ó
    
    Args:
        results_df: DataFrame –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó
        analysis_data: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∞–Ω–∞–ª—ñ–∑—É
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó
        
    Returns:
        EvaluationResults –∑ —É—Å—ñ–º–∞ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """
    
    # –û—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π
    model_metrics = evaluate_model_performance(results_df, analysis_data)
    
    # –û—Ü—ñ–Ω–∫–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    control_metrics = evaluate_control_performance(results_df, params)
    
    # –ó–∞–≥–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
    overall_metrics = calculate_overall_metrics(results_df, params, 
                                               model_metrics, control_metrics)
    
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º
    return EvaluationResults(
        **model_metrics,
        **control_metrics,
        **overall_metrics
    )

# =============================================================================
# === –§–£–ù–ö–¶–Ü–á –í–ò–í–û–î–£ –¢–ê –ó–í–Ü–¢–ù–û–°–¢–Ü ===
# =============================================================================

def print_evaluation_report(eval_results: EvaluationResults, detailed: bool = True):
    """
    –í–∏–≤–æ–¥–∏—Ç—å –∑–≤—ñ—Ç –ø—Ä–æ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    
    Args:
        eval_results: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è
        detailed: –ß–∏ –≤–∏–≤–æ–¥–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
    """
    
    print("üéØ –û–¶–Ü–ù–ö–ê –ï–§–ï–ö–¢–ò–í–ù–û–°–¢–Ü MPC –°–ò–ú–£–õ–Ø–¶–Ü–á")
    print("=" * 50)
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ (–∑–∞–≤–∂–¥–∏ –≤–∏–≤–æ–¥–∏–º–æ)
    print(f"‚≠ê –ó–ê–ì–ê–õ–¨–ù–ê –û–¶–Ü–ù–ö–ê: {eval_results.overall_score:.1f}/100")
    print(f"üîí –°–¢–ê–ë–Ü–õ–¨–ù–Ü–°–¢–¨ –ü–†–û–¶–ï–°–£: {eval_results.process_stability:.3f}")
    
    # ‚úÖ –î–û–î–ê–Ñ–ú–û –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Æ
    classification = get_mpc_quality_classification(eval_results.overall_score)
    print(f"üìä –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø: {classification}")
    
    if detailed:
        print(f"\nüìä –Ø–ö–Ü–°–¢–¨ –ú–û–î–ï–õ–ï–ô:")
        print(f"   ‚Ä¢ Fe RMSE: {eval_results.model_rmse_fe:.3f} (R¬≤ = {eval_results.model_r2_fe:.3f})")
        print(f"   ‚Ä¢ Mass RMSE: {eval_results.model_rmse_mass:.3f} (R¬≤ = {eval_results.model_r2_mass:.3f})")
        print(f"   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Fe: {eval_results.model_bias_fe:+.3f}")
        print(f"   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Mass: {eval_results.model_bias_mass:+.3f}")
        
        print(f"\nüéÆ –Ø–ö–Ü–°–¢–¨ –ö–ï–†–£–í–ê–ù–ù–Ø:")
        print(f"   ‚Ä¢ –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è Fe: {eval_results.tracking_error_fe:.3f}")
        print(f"   ‚Ä¢ –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è Mass: {eval_results.tracking_error_mass:.3f}")
        print(f"   ‚Ä¢ ISE Fe: {eval_results.ise_fe:.1f}")
        print(f"   ‚Ä¢ ISE Mass: {eval_results.ise_mass:.1f}")
        print(f"   ‚Ä¢ IAE Fe: {eval_results.iae_fe:.1f}")
        print(f"   ‚Ä¢ IAE Mass: {eval_results.iae_mass:.1f}")
        print(f"   ‚Ä¢ –ó–≥–ª–∞–¥–∂–µ–Ω—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è: {eval_results.control_smoothness:.3f}")
        print(f"   ‚Ä¢ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è —É—Å—Ç–∞–≤–∫–∏ Fe: {eval_results.setpoint_achievement_fe:.1f}%")
        print(f"   ‚Ä¢ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è —É—Å—Ç–∞–≤–∫–∏ Mass: {eval_results.setpoint_achievement_mass:.1f}%")

        print(f"\nüéõÔ∏è –ê–ì–†–ï–°–ò–í–ù–Ü–°–¢–¨ –ö–ï–†–£–í–ê–ù–ù–Ø:")
        print(f"   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –∑–º—ñ–Ω–∞: {eval_results.control_aggressiveness:.3f}")
        print(f"   ‚Ä¢ –í–∞—Ä—ñ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å: {eval_results.control_variability:.3f}")
        print(f"   ‚Ä¢ –ï–Ω–µ—Ä–≥—ñ—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è: {eval_results.control_energy:.1f}")
        print(f"   ‚Ä¢ –Ü–Ω–¥–µ–∫—Å —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ: {eval_results.control_stability_index:.3f}")
        print(f"   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É: {eval_results.control_utilization:.1f}%")
        print(f"   ‚Ä¢ –ó–Ω–∞—á–Ω—ñ –∑–º—ñ–Ω–∏: {eval_results.significant_changes_count:.0f} ({eval_results.significant_changes_frequency:.1%})")
        print(f"   ‚Ä¢ –ó–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É: {eval_results.directional_switches_count:.0f} ({eval_results.directional_switches_per_step:.1%})")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–∞: {eval_results.max_control_change:.3f}")
        print(f"   ‚Ä¢ –ö—Ä–æ–∫—ñ–≤ –Ω–∞ –º–∞–∫—Å–∏–º—É–º—ñ: {eval_results.steps_at_max_delta_u:.0f}")
        
        # ‚úÖ –î–û–î–ê–Ñ–ú–û –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á
        recommendations = generate_recommendations(eval_results)
        if recommendations:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
            for i, rec in enumerate(recommendations, 1):
                print(f"   {i}. {rec}")

def get_mpc_quality_classification(score: float) -> str:
    """–ö–ª–∞—Å–∏—Ñ—ñ–∫—É—î —è–∫—ñ—Å—Ç—å MPC —Å–∏—Å—Ç–µ–º–∏"""
    if score >= 80:
        return "–í—ñ–¥–º—ñ–Ω–Ω–æ"
    elif score >= 65:
        return "–î–æ–±—Ä–µ" 
    elif score >= 50:
        return "–ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ"
    elif score >= 35:
        return "–ü–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"
    else:
        return "–ù–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"

def generate_recommendations(eval_results: EvaluationResults) -> List[str]:
    """–ì–µ–Ω–µ—Ä—É—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"""
    recommendations = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ—á–Ω—ñ—Å—Ç—å –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è Mass
    if eval_results.tracking_error_mass > 2.0:
        recommendations.append("–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —Ç–æ—á–Ω—ñ—Å—Ç—å –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è Mass (–ø–æ–º–∏–ª–∫–∞ > 2.0)")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —É—Å—Ç–∞–≤–æ–∫
    if eval_results.setpoint_achievement_fe < 70:
        recommendations.append("–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —É—Å—Ç–∞–≤–∫–∏ Fe (< 70% –≤ –¥–æ–ø—É—Å–∫—É)")
        
    if eval_results.setpoint_achievement_mass < 70:
        recommendations.append("–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —É—Å—Ç–∞–≤–∫–∏ Mass (< 70% –≤ –¥–æ–ø—É—Å–∫—É)")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ
    if eval_results.model_r2_fe < 0.8:
        recommendations.append("–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —è–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ –¥–ª—è Fe (R¬≤ < 0.8)")
        
    if eval_results.model_r2_mass < 0.8:
        recommendations.append("–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —è–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ –¥–ª—è Mass (R¬≤ < 0.8)")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–≥–ª–∞–¥–∂–µ–Ω—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    if eval_results.control_smoothness < 0.5:
        recommendations.append("–ó–º–µ–Ω—à–∏—Ç–∏ –∫–æ–ª–∏–≤–∞–Ω–Ω—è –∫–µ—Ä—É—é—á–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É")
    
    # –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –≤—ñ–¥–≥—É–∫–∏
    if eval_results.control_smoothness > 0.8:
        recommendations.append("‚úÖ –°—Ç–∞–±—ñ–ª—å–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è - –¥–æ–±—Ä–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
        
    if eval_results.process_stability > 0.9:
        recommendations.append("‚úÖ –í–∏—Å–æ–∫–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—É!")
        
    if eval_results.overall_score > 80:
        recommendations.append("‚úÖ –í—ñ–¥–º—ñ–Ω–Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å!")
    
    if eval_results.control_stability_index < 0.6:
        recommendations.append("üîÑ –ó–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç—ñ –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É - –∑–±—ñ–ª—å—à–∏—Ç–∏ Œª_obj")
        
    if eval_results.control_aggressiveness > 1.0:
        recommendations.append("‚ö° –ó–º–µ–Ω—à–∏—Ç–∏ –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è")
        
    if eval_results.control_utilization > 80:
        recommendations.append("üìä –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –º–µ–∂—ñ - –∑–±—ñ–ª—å—à–∏—Ç–∏ delta_u_max")
        
    if eval_results.significant_changes_frequency > 0.3:
        recommendations.append("üìà –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ä—ñ–∑–∫–∏—Ö –∑–º—ñ–Ω - —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é")
    
    # –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –≤—ñ–¥–≥—É–∫–∏
    if eval_results.control_stability_index > 0.8:
        recommendations.append("‚úÖ –°—Ç–∞–±—ñ–ª—å–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–µ–∑ –∫–æ–ª–∏–≤–∞–Ω—å!")
        
    return recommendations

def get_performance_summary(eval_results: EvaluationResults) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    score = eval_results.overall_score
    
    if score >= 90:
        return "üåü –í—ñ–¥–º—ñ–Ω–Ω–æ"
    elif score >= 80:
        return "‚úÖ –î–æ–±—Ä–µ"
    elif score >= 70:
        return "üìà –ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ"
    elif score >= 60:
        return "‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"
    else:
        return "‚ùå –ù–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ"

# =============================================================================
# === –§–£–ù–ö–¶–Ü–á –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø ===
# =============================================================================

def compare_evaluations(evaluations: Dict[str, EvaluationResults], 
                       show_details: bool = True) -> None:
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫—ñ–ª—å–∫–æ—Ö —Å–∏–º—É–ª—è—Ü—ñ–π
    
    Args:
        evaluations: –°–ª–æ–≤–Ω–∏–∫ {–Ω–∞–∑–≤–∞_–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: EvaluationResults}
        show_details: –ß–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
    """
    
    print("\nüîç –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–ô")
    print("=" * 60)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
    configs = list(evaluations.keys())
    print(f"{'–ú–µ—Ç—Ä–∏–∫–∞':<25}", end="")
    for config in configs:
        print(f"{config:>15}", end="")
    print()
    print("-" * (25 + 15 * len(configs)))
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
    print(f"{'–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞':<25}", end="")
    for config in configs:
        score = evaluations[config].overall_score
        print(f"{score:>13.1f}/100", end="")
    print()
    
    if show_details:
        # –ö–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        metrics_to_show = [
            ('Model R¬≤ Fe', 'model_r2_fe', '.3f'),
            ('Model R¬≤ Mass', 'model_r2_mass', '.3f'),
            ('ISE Fe', 'ise_fe', '.1f'),
            ('ISE Mass', 'ise_mass', '.1f'),
            ('IAE Fe', 'iae_fe', '.1f'),
            ('IAE Mass', 'iae_mass', '.1f'),
            ('Tracking Fe', 'setpoint_achievement_fe', '.1f'),
            ('Tracking Mass', 'setpoint_achievement_mass', '.1f'),
            ('–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å', 'process_stability', '.3f')
        ]
        
        for metric_name, attr_name, fmt in metrics_to_show:
            print(f"{metric_name:<25}", end="")
            for config in configs:
                value = getattr(evaluations[config], attr_name)
                if 'achievement' in attr_name:
                    print(f"{value:>{13}{fmt}}%", end="")
                else:
                    print(f"{value:>{15}{fmt}}", end="")
            print()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è
    best_config = max(evaluations.keys(), 
                     key=lambda k: evaluations[k].overall_score)
    best_score = evaluations[best_config].overall_score
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: '{best_config}' (–æ—Ü—ñ–Ω–∫–∞: {best_score:.1f})")

# =============================================================================
# === –§–£–ù–ö–¶–Ü–á –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–á ===
# =============================================================================

def create_evaluation_plots(results_df: pd.DataFrame, eval_results: EvaluationResults, 
                           params: Dict, save_path: Optional[str] = None):
    """
    –°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    
    Args:
        results_df: DataFrame –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó
        eval_results: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó  
        save_path: –®–ª—è—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    """
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('–û—Ü—ñ–Ω–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ MPC —Å–∏–º—É–ª—è—Ü—ñ—ó', fontsize=16, fontweight='bold')
    
    # 1. –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —É—Å—Ç–∞–≤–æ–∫
    ax1 = axes[0, 0]
    time_steps = np.arange(len(results_df))
    
    ax1.plot(time_steps, results_df['conc_fe'], 'b-', label='Fe —Ñ–∞–∫—Ç–∏—á–Ω–µ', alpha=0.8)
    ax1.axhline(y=params.get('ref_fe', 53.5), color='b', linestyle='--', 
                label=f"Fe —É—Å—Ç–∞–≤–∫–∞ ({params.get('ref_fe', 53.5)})")
    
    ax1_twin = ax1.twinx()
    ax1_twin.plot(time_steps, results_df['conc_mass'], 'r-', label='Mass —Ñ–∞–∫—Ç–∏—á–Ω–µ', alpha=0.8)
    ax1_twin.axhline(y=params.get('ref_mass', 57.0), color='r', linestyle='--',
                     label=f"Mass —É—Å—Ç–∞–≤–∫–∞ ({params.get('ref_mass', 57.0)})")
    
    ax1.set_xlabel('–ö—Ä–æ–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó')
    ax1.set_ylabel('Fe –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è, %', color='b')
    ax1_twin.set_ylabel('Mass –ø–æ—Ç—ñ–∫, —Ç/–≥', color='r')
    ax1.set_title('–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —É—Å—Ç–∞–≤–æ–∫')
    ax1.legend(loc='upper left')
    ax1_twin.legend(loc='upper right')
    ax1.grid(True, alpha=0.3)
    
    # 2. –ö–µ—Ä—É—é—á–∏–π —Å–∏–≥–Ω–∞–ª
    ax2 = axes[0, 1]
    ax2.plot(time_steps, results_df['solid_feed_percent'], 'g-', linewidth=1.5)
    ax2.set_xlabel('–ö—Ä–æ–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó')
    ax2.set_ylabel('Solid feed, %')
    ax2.set_title(f'–ó–≥–ª–∞–¥–∂–µ–Ω—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è: {eval_results.control_smoothness:.3f}')
    ax2.grid(True, alpha=0.3)
    
    # 3. –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
    ax3 = axes[1, 0]
    fe_errors = results_df['conc_fe'] - params.get('ref_fe', 53.5)
    mass_errors = results_df['conc_mass'] - params.get('ref_mass', 57.0)
    
    ax3.hist(fe_errors, bins=20, alpha=0.7, label='Fe –ø–æ–º–∏–ª–∫–∏', color='blue')
    ax3.axvline(x=0, color='black', linestyle='--', alpha=0.8)
    ax3.set_xlabel('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è')
    ax3.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    ax3.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ–º–∏–ª–æ–∫ Fe')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    
    # 4. –ü—ñ–¥—Å—É–º–∫–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
    ax4 = axes[1, 1]
    ax4.axis('off')
    
    # –¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç –±–µ–∑ –µ–º–æ–¥–∑—ñ –¥–ª—è matplotlib
    summary_text = f"""
–ü–Ü–î–°–£–ú–û–ö –û–¶–Ü–ù–ö–ò

–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: {eval_results.overall_score:.1f}/100
–°—Ç–∞—Ç—É—Å: {get_performance_summary(eval_results).replace('üåü', '').replace('‚úÖ', '').replace('üìà', '').replace('‚ö†Ô∏è', '').replace('‚ùå', '').strip()}

–ú–æ–¥–µ–ª—å:
  R¬≤ Fe: {eval_results.model_r2_fe:.3f}
  R¬≤ Mass: {eval_results.model_r2_mass:.3f}

–ö–µ—Ä—É–≤–∞–Ω–Ω—è:
  –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è Fe: {eval_results.setpoint_achievement_fe:.1f}%
  –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è Mass: {eval_results.setpoint_achievement_mass:.1f}%
  
–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å: {eval_results.process_stability:.3f}
    """
    
    ax4.text(0.05, 0.95, summary_text, transform=ax4.transAxes, fontsize=11,
             verticalalignment='top', fontfamily='sans-serif',  # –ó–º—ñ–Ω–µ–Ω–æ –∑ 'monospace'
             bbox=dict(boxstyle='round', facecolor='lightgray', alpha=0.8))
    
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        print(f"üìä –ì—Ä–∞—Ñ—ñ–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {save_path}")
    
    plt.show()

# =============================================================================
# === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===
# =============================================================================

def validate_evaluation_data(results_df: pd.DataFrame, analysis_data: Dict, 
                            params: Dict) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è"""
    
    required_columns = ['conc_fe', 'conc_mass', 'solid_feed_percent']
    missing_columns = [col for col in required_columns if col not in results_df.columns]
    
    if missing_columns:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ results_df: {missing_columns}")
        return False
    
    if len(results_df) == 0:
        print("‚ùå results_df –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return False
    
    required_params = ['ref_fe', 'ref_mass']
    missing_params = [param for param in required_params if param not in params]
    
    if missing_params:
        print(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º): {missing_params}")
    
    return True

if __name__ == "__main__":
    # –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
    print("evaluation_simple.py - –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
    print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
    print("  from evaluation_simple import evaluate_simulation, print_evaluation_report")
    print("  eval_results = evaluate_simulation(results_df, analysis_data, params)")
    print("  print_evaluation_report(eval_results)")