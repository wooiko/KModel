# config_manager.py - –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è–º–∏ MPC

import json
import inspect
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple, Callable
import pandas as pd

# =============================================================================
# === –í–ù–£–¢–†–Ü–®–ù–Ü –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===
# =============================================================================

def _get_config_dir() -> Path:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è–º–∏."""
    return Path("mpc_configs")

def _get_results_dir() -> Path:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
    return Path("mpc_results")

def _ensure_config_dir_exists() -> None:
    """–°—Ç–≤–æ—Ä—é—î –ø–∞–ø–∫—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î."""
    config_dir = _get_config_dir()
    config_dir.mkdir(exist_ok=True)

def _ensure_results_dir_exists() -> None:
    """–°—Ç–≤–æ—Ä—é—î –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î."""
    results_dir = _get_results_dir()
    results_dir.mkdir(exist_ok=True)

def _validate_config_file(config_file: Path) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Ñ–∞–π–ª –≤–∞–ª—ñ–¥–Ω–∏–º JSON."""
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            json.load(f)
        return True
    except (json.JSONDecodeError, FileNotFoundError):
        return False

def _filter_for_simulate_mpc(config: Dict[str, Any]) -> Dict[str, Any]:
    """
    –§—ñ–ª—å—Ç—Ä—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, –∑–∞–ª–∏—à–∞—é—á–∏ —Ç—ñ–ª—å–∫–∏ –≤–∞–ª—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è simulate_mpc –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é L-MPC.
    """
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç—É—Ç —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤
    from sim import simulate_mpc
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —á–µ—Ä–µ–∑ —ñ–Ω—Å–ø–µ–∫—Ü—ñ—é
    sig = inspect.signature(simulate_mpc)
    valid_params = set(sig.parameters.keys())
    valid_params.discard('reference_df')  # –ü–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ
    filtered_config = {}
    invalid_params = []
    
    for key, value in config.items():
        if key in valid_params:
            filtered_config[key] = value
        elif key in ['name', 'description']:
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–ª—è –±–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            continue
        elif key.startswith('_') and key.endswith('_'):
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏ —Å–µ–∫—Ü—ñ–π (_SIMULATION_, _MODEL_, etc.)
            continue
        elif isinstance(value, str) and value.startswith('='):
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è-—Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏ ("======")
            continue
        else:
            invalid_params.append(key)
    
    # üÜï –°–ü–ï–¶–Ü–ê–õ–¨–ù–ê –û–ë–†–û–ë–ö–ê –õ–Ü–ù–Ü–ô–ù–ò–• –ú–û–î–ï–õ–ï–ô
    if filtered_config.get('model_type', '').lower() == 'linear':
        # –î–æ–¥–∞—î–º–æ L-MPC —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–∫—â–æ –≤–æ–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ
        linear_defaults = {
            'linear_type': 'ols',
            'poly_degree': 1,
            'include_bias': True,
            'alpha': 1.0
        }
        
        for param, default_value in linear_defaults.items():
            if param not in filtered_config:
                filtered_config[param] = default_value
                print(f"‚ÑπÔ∏è –î–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä L-MPC –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: {param}={default_value}")
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è L-MPC –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        if filtered_config.get('linear_type') not in ['ols', 'ridge', 'lasso']:
            print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π linear_type '{filtered_config.get('linear_type')}', –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 'ols'")
            filtered_config['linear_type'] = 'ols'
            
        if not (1 <= filtered_config.get('poly_degree', 1) <= 3):
            print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π poly_degree {filtered_config.get('poly_degree')}, –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 1")
            filtered_config['poly_degree'] = 1
    
    # üÜï –í–ê–õ–Ü–î–ê–¶–Ü–Ø –Ø–î–ï–†–ù–ò–• –ú–û–î–ï–õ–ï–ô
    elif filtered_config.get('model_type', '').lower() in ['krr', 'svr', 'gpr']:
        # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å kernel –¥–ª—è —è–¥–µ—Ä–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
        if 'kernel' not in filtered_config:
            filtered_config['kernel'] = 'rbf'
            print(f"‚ÑπÔ∏è –î–æ–¥–∞–Ω–æ kernel –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è K-MPC: rbf")
    
    if invalid_params:
        print(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: {', '.join(invalid_params)}")
    
    return filtered_config


# =============================================================================
# === –ü–£–ë–õ–Ü–ß–ù–Ü –§–£–ù–ö–¶–Ü–á ===
# =============================================================================

def load_config(config_name: str) -> Dict[str, Any]:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é MPC –∑ —Ñ–∞–π–ª—É.
    
    Args:
        config_name: –ù–∞–∑–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (–±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .json)
        
    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        
    Raises:
        FileNotFoundError: –Ø–∫—â–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞
        ValueError: –Ø–∫—â–æ —Ñ–∞–π–ª –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON
    """
    config_dir = _get_config_dir()
    config_file = config_dir / f"{config_name}.json"
    
    if not config_file.exists():
        raise FileNotFoundError(f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è '{config_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ {config_dir}")
    
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        return config
    except json.JSONDecodeError as e:
        raise ValueError(f"–ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó '{config_name}': {e}")

def save_config(config: Dict[str, Any], config_name: str) -> None:
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é MPC —É —Ñ–∞–π–ª.
    
    Args:
        config: –°–ª–æ–≤–Ω–∏–∫ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config_name: –ù–∞–∑–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (–±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .json)
    """
    _ensure_config_dir_exists()
    
    config_dir = _get_config_dir()
    config_file = config_dir / f"{config_name}.json"
    
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=4, ensure_ascii=False)

def list_configs() -> List[str]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π.
    
    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π (–±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è .json)
    """
    config_dir = _get_config_dir()
    if not config_dir.exists():
        return []
    
    configs = []
    for config_file in config_dir.glob("*.json"):
        if _validate_config_file(config_file):
            configs.append(config_file.stem)
    
    return sorted(configs)

def create_default_configs() -> None:
    """
    –°—Ç–≤–æ—Ä—é—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó MPC –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é L-MPC.
    """
    _ensure_config_dir_exists()
    
    # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (K-MPC)
    conservative_config = {
        "name": "conservative",
        "description": "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ (K-MPC)",
        
        # –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "N_data": 2000,
        "control_pts": 200,
        "seed": 42,
        
        # –ú–æ–¥–µ–ª—å
        "model_type": "krr",
        "kernel": "rbf",
        "find_optimal_params": True,
        
        # MPC –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "Np": 6,
        "Nc": 4,
        "lag": 2,
        "Œª_obj": 0.2,
        
        # –í–∞–≥–∏ —Ç–∞ —É—Å—Ç–∞–≤–∫–∏
        "w_fe": 5.0,
        "w_mass": 1.0,
        "ref_fe": 53.5,
        "ref_mass": 57.0,
        "tolerance_fe_percent": 1.5,
        "tolerance_mass_percent": 2.0,
        
        # Trust region
        "adaptive_trust_region": True,
        "initial_trust_radius": 1.0,
        "min_trust_radius": 0.5,
        "max_trust_radius": 3.0,
        "trust_decay_factor": 0.9,
        "rho_trust": 0.3,
        
        # EKF –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "P0": 0.01,
        "Q_phys": 800,
        "Q_dist": 1,
        "R": 0.5,
        "q_adaptive_enabled": True,
        "q_alpha": 0.95,
        "q_nis_threshold": 2.0,
        
        # –ü–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        "enable_retraining": True,
        "retrain_period": 50,
        "retrain_innov_threshold": 0.3,
        "retrain_window_size": 1000,
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è
        "use_soft_constraints": True,
        "delta_u_max": 0.8,
        "u_min": 20.0,
        "u_max": 40.0,
        
        # –ü—Ä–æ—Ü–µ—Å
        "plant_model_type": "rf",
        "noise_level": "low",
        "enable_nonlinear": False,
        
        # –ê–Ω–æ–º–∞–ª—ñ—ó
        "anomaly_params": {
            "window": 25,
            "spike_z": 4.0,
            "drop_rel": 0.30,
            "freeze_len": 5,
            "enabled": True
        },
        
        "run_analysis": True
    }
    
    # –ê–≥—Ä–µ—Å–∏–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (K-MPC)
    aggressive_config = {
        "name": "aggressive",
        "description": "–ê–≥—Ä–µ—Å–∏–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–¥–≥—É–∫—É (K-MPC)",
        
        # –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "N_data": 3000,
        "control_pts": 300,
        "seed": 42,
        
        # –ú–æ–¥–µ–ª—å
        "model_type": "svr",
        "kernel": "rbf", 
        "find_optimal_params": True,
        
        # MPC –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "Np": 8,
        "Nc": 6,
        "lag": 2,
        "Œª_obj": 0.05,
        
        # –í–∞–≥–∏ —Ç–∞ —É—Å—Ç–∞–≤–∫–∏
        "w_fe": 10.0,
        "w_mass": 2.0,
        "ref_fe": 54.0,
        "ref_mass": 58.0,
        "tolerance_fe_percent": 2.5,
        "tolerance_mass_percent": 3.0,
        
        # Trust region
        "adaptive_trust_region": True,
        "initial_trust_radius": 2.0,
        "min_trust_radius": 0.8,
        "max_trust_radius": 5.0,
        "trust_decay_factor": 0.8,
        "rho_trust": 0.1,
        
        # EKF –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "P0": 0.01,
        "Q_phys": 1200,
        "Q_dist": 1,
        "R": 0.1,
        "q_adaptive_enabled": True,
        "q_alpha": 0.90,
        "q_nis_threshold": 3.0,
        
        # –ü–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        "enable_retraining": True,
        "retrain_period": 30,
        "retrain_innov_threshold": 0.2,
        "retrain_window_size": 800,
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è
        "use_soft_constraints": True,
        "delta_u_max": 1.2,
        "u_min": 18.0,
        "u_max": 42.0,
        
        # –ü—Ä–æ—Ü–µ—Å
        "plant_model_type": "rf",
        "noise_level": "medium",
        "enable_nonlinear": True,
        
        # –ù–µ–ª—ñ–Ω—ñ–π–Ω—ñ—Å—Ç—å
        "nonlinear_config": {
            "concentrate_fe_percent": ("pow", 2),
            "concentrate_mass_flow": ("pow", 1.5)
        },
        
        # –ê–Ω–æ–º–∞–ª—ñ—ó
        "anomaly_params": {
            "window": 20,
            "spike_z": 3.5,
            "drop_rel": 0.25,
            "freeze_len": 3,
            "enabled": True
        },
        
        "run_analysis": True
    }
    
    # üÜï –õ–Ü–ù–Ü–ô–ù–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø (L-MPC) - OLS
    linear_ols_config = {
        "name": "linear_ols",
        "description": "–õ—ñ–Ω—ñ–π–Ω–∞ –º–æ–¥–µ–ª—å –∑ OLS —Ä–µ–≥—Ä–µ—Å—ñ—î—é (L-MPC)",
        
        # –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "N_data": 2000,
        "control_pts": 200,
        "seed": 42,
        
        # üéØ –õ–Ü–ù–Ü–ô–ù–ê –ú–û–î–ï–õ–¨
        "model_type": "linear",
        "linear_type": "ols",
        "poly_degree": 1,
        "include_bias": True,
        "find_optimal_params": False,
        
        # MPC –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "Np": 6,
        "Nc": 4,
        "lag": 2,
        "Œª_obj": 0.15,
        
        # –í–∞–≥–∏ —Ç–∞ —É—Å—Ç–∞–≤–∫–∏
        "w_fe": 6.0,
        "w_mass": 1.0,
        "ref_fe": 53.5,
        "ref_mass": 57.0,
        "tolerance_fe_percent": 2.5,
        "tolerance_mass_percent": 3.0,
        
        # Trust region (–º–µ–Ω—à –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ª—ñ–Ω—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ)
        "adaptive_trust_region": False,
        "initial_trust_radius": 1.5,
        "min_trust_radius": 0.8,
        "max_trust_radius": 3.0,
        "trust_decay_factor": 0.9,
        "rho_trust": 0.2,
        
        # EKF –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "P0": 0.01,
        "Q_phys": 600,
        "Q_dist": 1,
        "R": 0.3,
        "q_adaptive_enabled": False,
        "q_alpha": 0.98,
        "q_nis_threshold": 2.5,
        
        # –ü–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è (—á–∞—Å—Ç—ñ—à–µ –¥–ª—è –ª—ñ–Ω—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ)
        "enable_retraining": True,
        "retrain_period": 40,
        "retrain_innov_threshold": 0.25,
        "retrain_window_size": 800,
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è
        "use_soft_constraints": True,
        "delta_u_max": 1.0,
        "u_min": 20.0,
        "u_max": 40.0,
        
        # –ü—Ä–æ—Ü–µ—Å
        "plant_model_type": "rf",
        "noise_level": "low",
        "enable_nonlinear": False,
        
        # –ê–Ω–æ–º–∞–ª—ñ—ó
        "anomaly_params": {
            "window": 25,
            "spike_z": 4.0,
            "drop_rel": 0.30,
            "freeze_len": 5,
            "enabled": True
        },
        
        "run_analysis": False
    }
    
    # üÜï –ü–û–õ–Ü–ù–û–ú–Ü–ê–õ–¨–ù–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø (L-MPC) - Ridge
    linear_poly_config = {
        "name": "linear_poly",
        "description": "–ü–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–∞ –º–æ–¥–µ–ª—å —Å—Ç—É–ø–µ–Ω—è 2 –∑ Ridge —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü—ñ—î—é (L-MPC)",
        
        # –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "N_data": 2500,
        "control_pts": 250,
        "seed": 42,
        
        # üéØ –ü–û–õ–Ü–ù–û–ú–Ü–ê–õ–¨–ù–ê –ú–û–î–ï–õ–¨
        "model_type": "linear",
        "linear_type": "ridge",
        "poly_degree": 2,
        "include_bias": True,
        "find_optimal_params": True,
        "alpha": 1.0,  # –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è Ridge
        
        # MPC –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "Np": 5,
        "Nc": 3,
        "lag": 2,
        "Œª_obj": 0.1,
        
        # –í–∞–≥–∏ —Ç–∞ —É—Å—Ç–∞–≤–∫–∏
        "w_fe": 8.0,
        "w_mass": 1.5,
        "ref_fe": 53.8,
        "ref_mass": 57.5,
        "tolerance_fe_percent": 2.0,
        "tolerance_mass_percent": 2.5,
        
        # Trust region
        "adaptive_trust_region": True,
        "initial_trust_radius": 1.2,
        "min_trust_radius": 0.6,
        "max_trust_radius": 4.0,
        "trust_decay_factor": 0.85,
        "rho_trust": 0.15,
        
        # EKF –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "P0": 0.01,
        "Q_phys": 900,
        "Q_dist": 1,
        "R": 0.2,
        "q_adaptive_enabled": True,
        "q_alpha": 0.96,
        "q_nis_threshold": 2.2,
        
        # –ü–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        "enable_retraining": True,
        "retrain_period": 35,
        "retrain_innov_threshold": 0.22,
        "retrain_window_size": 900,
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è
        "use_soft_constraints": True,
        "delta_u_max": 1.1,
        "u_min": 19.0,
        "u_max": 41.0,
        
        # –ü—Ä–æ—Ü–µ—Å
        "plant_model_type": "rf",
        "noise_level": "medium",
        "enable_nonlinear": False,
        
        # –ê–Ω–æ–º–∞–ª—ñ—ó
        "anomaly_params": {
            "window": 22,
            "spike_z": 3.8,
            "drop_rel": 0.28,
            "freeze_len": 4,
            "enabled": True
        },
        
        "run_analysis": True
    }
    
    # –®–≤–∏–¥–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    fast_test_config = {
        "name": "fast_test",
        "description": "–®–≤–∏–¥–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ª–∞–¥–∫–∏",
        
        # –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "N_data": 1000,
        "control_pts": 100,
        "seed": 42,
        
        # –ú–æ–¥–µ–ª—å
        "model_type": "linear",
        "linear_type": "ols",
        "poly_degree": 1,
        "find_optimal_params": False,
        
        # MPC –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "Np": 4,
        "Nc": 3,
        "lag": 1,
        "Œª_obj": 0.1,
        
        # –í–∞–≥–∏ —Ç–∞ —É—Å—Ç–∞–≤–∫–∏
        "w_fe": 7.0,
        "w_mass": 1.0,
        "ref_fe": 53.5,
        "ref_mass": 57.0,
        "tolerance_fe_percent": 5.0,
        "tolerance_mass_percent": 5.0,
        
        # Trust region
        "adaptive_trust_region": False,
        "rho_trust": 0.2,
        
        # EKF –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "P0": 0.01,
        "Q_phys": 600,
        "Q_dist": 1,
        "R": 1.0,
        "q_adaptive_enabled": False,
        
        # –ü–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        "enable_retraining": False,
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è
        "use_soft_constraints": False,
        "delta_u_max": 1.0,
        
        # –ü—Ä–æ—Ü–µ—Å
        "plant_model_type": "rf",
        "noise_level": "none",
        "enable_nonlinear": False,
        
        # –ê–Ω–æ–º–∞–ª—ñ—ó
        "anomaly_params": {
            "enabled": False
        },
        
        "run_analysis": False
    }
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    configs = [conservative_config, aggressive_config, linear_ols_config, linear_poly_config, fast_test_config]
    
    for config in configs:
        config_name = config["name"]
        save_config(config, config_name)
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(configs)} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π (–≤–∫–ª—é—á–∞—é—á–∏ L-MPC)")

def create_default_configs_ext() -> None:
    """
    –°—Ç–≤–æ—Ä—é—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó MPC –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é L-MPC.
    """
    _ensure_config_dir_exists()
    
    # KRR-MPC
    krr_mpc = {
        "name": "krr-mpc",
        "description": "KRR-MPC",
        
        # –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "N_data": 5000,
        "control_pts": 500,
        "seed": 42,
        
        # –ú–æ–¥–µ–ª—å
        "model_type": "krr",
        "kernel": "rbf",
        "find_optimal_params": True,
        
        # MPC –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "Np": 6,
        "Nc": 4,
        "lag": 2,
        "Œª_obj": 0.1,
        
        # –í–∞–≥–∏ —Ç–∞ —É—Å—Ç–∞–≤–∫–∏
        "w_fe": 5.0,
        "w_mass": 2.0,
        "ref_fe": 54.0,
        "ref_mass": 58.0,
        "tolerance_fe_percent": 1.5,
        "tolerance_mass_percent": 2.0,
        
        # Trust region
        "adaptive_trust_region": True,
        "initial_trust_radius": 2.0,
        "min_trust_radius": 0.5,
        "max_trust_radius": 2.0,
        "trust_decay_factor": 0.9,
        "rho_trust": 0.3,
        
        # EKF –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "P0": 0.01,
        "Q_phys": 600,
        "Q_dist": 1,
        "R": 1.0,
        "q_adaptive_enabled": True,
        "q_alpha": 0.90,
        "q_nis_threshold": 3.0,
        
        # –ü–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        "enable_retraining": True,
        "retrain_period": 50,
        "retrain_innov_threshold": 0.3,
        "retrain_window_size": 1000,
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è
        "use_soft_constraints": True,
        "delta_u_max": 0.8,
        "u_min": 20.0,
        "u_max": 40.0,
        
        # –ü—Ä–æ—Ü–µ—Å
        "plant_model_type": "rf",
        "noise_level": "low",

        # –ù–µ–ª—ñ–Ω—ñ–π–Ω—ñ—Å—Ç—å
        "enable_nonlinear": True,
        "nonlinear_config": {
            "concentrate_fe_percent": ["pow", 2],
            "concentrate_mass_flow": ["pow", 1.5]
        },
        
        # –ê–Ω–æ–º–∞–ª—ñ—ó
        "anomaly_params": {
            "window": 25,
            "spike_z": 4.0,
            "drop_rel": 0.30,
            "freeze_len": 5,
            "enabled": True
        },
        
        "run_analysis": False
    }
    
    # SVR-MPC
    svr_mpc = {
        "name": "svr-mpc",
        "description": "svr-MPC",
        
        # –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "N_data": 5000,
        "control_pts": 500,
        "seed": 42,
        
        # –ú–æ–¥–µ–ª—å
        "model_type": "svr",
        "kernel": "rbf",
        "find_optimal_params": True,
        
        # MPC –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "Np": 6,
        "Nc": 4,
        "lag": 2,
        "Œª_obj": 0.1,
        
        # –í–∞–≥–∏ —Ç–∞ —É—Å—Ç–∞–≤–∫–∏
        "w_fe": 5.0,
        "w_mass": 2.0,
        "ref_fe": 54.0,
        "ref_mass": 58.0,
        "tolerance_fe_percent": 1.5,
        "tolerance_mass_percent": 2.0,
        
        # Trust region
        "adaptive_trust_region": True,
        "initial_trust_radius": 2.0,
        "min_trust_radius": 0.5,
        "max_trust_radius": 2.0,
        "trust_decay_factor": 0.9,
        "rho_trust": 0.3,
        
        # EKF –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "P0": 0.01,
        "Q_phys": 600,
        "Q_dist": 1,
        "R": 1.0,
        "q_adaptive_enabled": True,
        "q_alpha": 0.90,
        "q_nis_threshold": 3.0,
        
        # –ü–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        "enable_retraining": True,
        "retrain_period": 50,
        "retrain_innov_threshold": 0.3,
        "retrain_window_size": 1000,
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è
        "use_soft_constraints": True,
        "delta_u_max": 0.8,
        "u_min": 20.0,
        "u_max": 40.0,
        
        # –ü—Ä–æ—Ü–µ—Å
        "plant_model_type": "rf",
        "noise_level": "low",

        # –ù–µ–ª—ñ–Ω—ñ–π–Ω—ñ—Å—Ç—å
        "enable_nonlinear": True,
        "nonlinear_config": {
            "concentrate_fe_percent": ["pow", 2],
            "concentrate_mass_flow": ["pow", 1.5]
        },
        
        # –ê–Ω–æ–º–∞–ª—ñ—ó
        "anomaly_params": {
            "window": 25,
            "spike_z": 4.0,
            "drop_rel": 0.30,
            "freeze_len": 5,
            "enabled": True
        },
        
        "run_analysis": False
    }

    # LIN-MPC
    lin_mpc = {
        "name": "lin-mpc",
        "description": "lin-MPC",
        
        # –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "N_data": 5000,
        "control_pts": 500,
        "seed": 42,
        
        # üéØ –ü–û–õ–Ü–ù–û–ú–Ü–ê–õ–¨–ù–ê –ú–û–î–ï–õ–¨
        "model_type": "linear",
        "linear_type": "ridge",
        "poly_degree": 2,
        "include_bias": True,
        "find_optimal_params": True,
        "alpha": 1.0,  # –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è Ridge
        
        # MPC –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "Np": 6,
        "Nc": 4,
        "lag": 2,
        "Œª_obj": 0.1,
        
        # –í–∞–≥–∏ —Ç–∞ —É—Å—Ç–∞–≤–∫–∏
        "w_fe": 5.0,
        "w_mass": 2.0,
        "ref_fe": 54.0,
        "ref_mass": 58.0,
        "tolerance_fe_percent": 1.5,
        "tolerance_mass_percent": 2.0,
        
        # Trust region
        "adaptive_trust_region": True,
        "initial_trust_radius": 2.0,
        "min_trust_radius": 0.5,
        "max_trust_radius": 2.0,
        "trust_decay_factor": 0.9,
        "rho_trust": 0.3,
        
        # EKF –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "P0": 0.01,
        "Q_phys": 600,
        "Q_dist": 1,
        "R": 1.0,
        "q_adaptive_enabled": True,
        "q_alpha": 0.90,
        "q_nis_threshold": 3.0,
        
        # –ü–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        "enable_retraining": True,
        "retrain_period": 50,
        "retrain_innov_threshold": 0.3,
        "retrain_window_size": 1000,
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è
        "use_soft_constraints": True,
        "delta_u_max": 0.8,
        "u_min": 20.0,
        "u_max": 40.0,
        
        # –ü—Ä–æ—Ü–µ—Å
        "plant_model_type": "rf",
        "noise_level": "low",

        # –ù–µ–ª—ñ–Ω—ñ–π–Ω—ñ—Å—Ç—å
        "enable_nonlinear": True,
        "nonlinear_config": {
            "concentrate_fe_percent": ["pow", 2],
            "concentrate_mass_flow": ["pow", 1.5]
        },
        
        # –ê–Ω–æ–º–∞–ª—ñ—ó
        "anomaly_params": {
            "window": 25,
            "spike_z": 4.0,
            "drop_rel": 0.30,
            "freeze_len": 5,
            "enabled": True
        },
        
        "run_analysis": False
    }
    
    # KRR-MPC-TEST
    krr_test = {
        "name": "krr-test",
        "description": "KRR-MPC-TEST",
        
        # –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "N_data": 5000,
        "control_pts": 500,
        "seed": 42,
        "train_size": 0.9,
        "val_size": 0.08,
        "test_size": 0.02,
        
        # –ú–æ–¥–µ–ª—å
        "model_type": "krr",
        "kernel": "rbf",
        "find_optimal_params": True,
        
        # MPC –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "Np": 6,
        "Nc": 4,
        "lag": 2,
        "Œª_obj": 0.5,
        
        # –í–∞–≥–∏ —Ç–∞ —É—Å—Ç–∞–≤–∫–∏
        "w_fe": 5.0,
        "w_mass": 2.0,
        "ref_fe": 54.0,
        "ref_mass": 58.0,
        "tolerance_fe_percent": 1.5,
        "tolerance_mass_percent": 2.0,
        
        # Trust region
        "adaptive_trust_region": True,
        "initial_trust_radius": 0.5,
        "min_trust_radius": 0.42,
        "max_trust_radius": 1.0,
        "trust_decay_factor": 0.96,
        "rho_trust": 0.015,
        "linearization_check_enabled": True,
        "max_linearization_distance": 0.8,
        "retrain_linearization_threshold": 1.0,
        
        # EKF –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        "P0": 0.01,
        "Q_phys": 600,
        "Q_dist": 1,
        "R": 1.0,
        "q_adaptive_enabled": True,
        "q_alpha": 0.90,
        "q_nis_threshold": 3.0,
        
        # –ü–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        "enable_retraining": True,
        "retrain_period": 50,
        "retrain_innov_threshold": 0.3,
        "retrain_window_size": 1000,
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è
        "use_soft_constraints": True,
        "delta_u_max": 0.8,
        "u_min": 20.0,
        "u_max": 40.0,
        
        # –ü—Ä–æ—Ü–µ—Å
        "plant_model_type": "rf",
        "noise_level": "low",

        # –ù–µ–ª—ñ–Ω—ñ–π–Ω—ñ—Å—Ç—å
        "enable_nonlinear": True,
        "nonlinear_config": {
            "concentrate_fe_percent": ["pow", 2],
            "concentrate_mass_flow": ["pow", 1.5]
        },
        
        # –ê–Ω–æ–º–∞–ª—ñ—ó
        "anomaly_params": {
            "window": 15,
            "spike_z": 2.5,
            "drop_rel": 0.15,
            "freeze_len": 4,
            "enabled": True
        },
        
        "run_analysis": False
    }
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    configs = [krr_mpc, svr_mpc, lin_mpc, krr_test]
    
    for config in configs:
        config_name = config["name"]
        save_config(config, config_name)
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(configs)} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π (–≤–∫–ª—é—á–∞—é—á–∏ L-MPC)")


def prompt_manual_adjustments(base_config: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ó–∞–ø–∏—Ç—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —Ä—É—á–Ω—ñ –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é L-MPC –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.
    
    Args:
        base_config: –ë–∞–∑–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        
    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä—É—á–Ω–∏–º–∏ –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è–º–∏
    """
    print(f"\nüîß –†–£–ß–ù–ï –ö–û–†–ï–ì–£–í–ê–ù–ù–Ø –ü–ê–†–ê–ú–ï–¢–†–Ü–í")
    print("=" * 50)
    print("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –±–µ–∑ –∑–º—ñ–Ω")
    
    adjustments = {}
    
    # –ì—Ä—É–ø—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é L-MPC
    categories = {
        "üìä –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏": [
            ("N_data", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ –¥–∞–Ω–∏—Ö", int),
            ("control_pts", "–ö—Ä–æ–∫—ñ–≤ –∫–µ—Ä—É–≤–∞–Ω–Ω—è", int),
        ],
        "ü§ñ –ú–æ–¥–µ–ª—å": [
            ("model_type", "–¢–∏–ø –º–æ–¥–µ–ª—ñ (krr/svr/linear)", str),
        ],
        "üîß –õ—ñ–Ω—ñ–π–Ω–∞ –º–æ–¥–µ–ª—å (—è–∫—â–æ model_type=linear)": [
            ("linear_type", "–¢–∏–ø –ª—ñ–Ω—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ (ols/ridge/lasso)", str),
            ("poly_degree", "–°—Ç—É–ø—ñ–Ω—å –ø–æ–ª—ñ–Ω–æ–º—É (1-3)", int),
            ("alpha", "–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü—ñ—ó", float),
        ],
        "üîÑ –Ø–¥–µ—Ä–Ω–∞ –º–æ–¥–µ–ª—å (—è–∫—â–æ model_type=krr/svr)": [
            ("kernel", "–¢–∏–ø —è–¥—Ä–∞ (rbf/linear/poly)", str),
            ("find_optimal_params", "–ê–≤—Ç–æ–ø–æ—à—É–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (True/False)", str),
        ],
        "üéØ MPC": [
            ("Np", "–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è", int),
            ("Nc", "–ì–æ—Ä–∏–∑–æ–Ω—Ç –∫–µ—Ä—É–≤–∞–Ω–Ω—è", int),
            ("Œª_obj", "–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è", float)
        ],
        "üìç –£—Å—Ç–∞–≤–∫–∏": [
            ("ref_fe", "–£—Å—Ç–∞–≤–∫–∞ Fe %", float),
            ("ref_mass", "–£—Å—Ç–∞–≤–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫—É", float),
            ("w_fe", "–í–∞–≥–∞ –¥–ª—è Fe", float),
            ("w_mass", "–í–∞–≥–∞ –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫—É", float)
        ],
        "üéØ –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—ñ –æ—Ü—ñ–Ω–∫–∏": [
            ("tolerance_fe_percent", "–¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ñ—Å—Ç—å Fe (%)", float),
            ("tolerance_mass_percent", "–¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ñ—Å—Ç—å Mass (%)", float)
        ]
    }
    
    for category_name, params_list in categories.items():
        print(f"\n{category_name}:")
        
        for param_name, description, param_type in params_list:
            if param_name not in base_config:
                continue
                
            current_value = base_config[param_name]
            
            try:
                prompt = f"  {description} (–ø–æ—Ç–æ—á–Ω–µ: {current_value}): "
                user_input = input(prompt).strip()
                
                if user_input:  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ —â–æ—Å—å
                    if param_type == str:
                        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è boolean –∑–Ω–∞—á–µ–Ω—å
                        if param_name == "find_optimal_params":
                            if user_input.lower() in ['true', 't', '1', '—Ç–∞–∫']:
                                adjustments[param_name] = True
                            elif user_input.lower() in ['false', 'f', '0', '–Ω—ñ']:
                                adjustments[param_name] = False
                            else:
                                adjustments[param_name] = user_input
                        else:
                            adjustments[param_name] = user_input
                    elif param_type in [int, float]:
                        adjustments[param_name] = param_type(user_input)
                        
            except (ValueError, TypeError) as e:
                print(f"    ‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {param_name}: {e}")
                continue
    
    return adjustments

# =============================================================================
# === –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø ===
# =============================================================================

def simulate_mpc_with_config(
    reference_df: pd.DataFrame,
    config_name: str = "conservative",
    manual_overrides: Optional[Dict[str, Any]] = None,
    progress_callback: Optional[Callable] = None,
    save_results: bool = True,
    show_evaluation_plots: bool = False,
    **kwargs
) -> Tuple[pd.DataFrame, Dict]:
    """
    –ó–∞–ø—É—Å–∫–∞—î —Å–∏–º—É–ª—è—Ü—ñ—é MPC –∑ –±–∞–∑–æ–≤–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é —Ç–∞ —Ä—É—á–Ω–∏–º–∏ –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è–º–∏.
    
    Args:
        reference_df: –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ñ –¥–∞–Ω—ñ
        config_name: –ù–∞–∑–≤–∞ –±–∞–∑–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "conservative")
        manual_overrides: –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        progress_callback: –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É
        save_results: –ß–∏ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º True)
        show_evaluation_plots: –ß–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ –æ—Ü—ñ–Ω–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º False)  # ‚úÖ –î–û–î–ê–Ñ–ú–û –û–ü–ò–°
        **kwargs: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –º–µ—Ç—Ä–∏–∫–∏)
        
    Raises:
        FileNotFoundError: –Ø–∫—â–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞
        ImportError: –Ø–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ simulate_mpc
    """
    
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Å–∏–º—É–ª—è—Ü—ñ—ó
        from sim import simulate_mpc
        
        # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–∑–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        try:
            params = load_config(config_name)
            print(f"üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –±–∞–∑–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é: {config_name}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª—é—á–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            key_params = ['model_type', 'Np', 'Nc', 'ref_fe', 'ref_mass', 'w_fe', 'w_mass', 'Œª_obj']
            print("üìä –ö–ª—é—á–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –±–∞–∑–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:")
            for param in key_params:
                if param in params:
                    print(f"   ‚Ä¢ {param}: {params[param]}")
                    
        except FileNotFoundError:
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è '{config_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            available = list_configs()
            if available:
                print(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {', '.join(available)}")
                print("–°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
                create_default_configs()
                params = load_config("conservative")
            else:
                raise FileNotFoundError(f"–ù–µ –≤–¥–∞—î—Ç—å—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é '{config_name}'")
        
        # 2. –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ä—É—á–Ω—ñ –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è
        if manual_overrides:
            print(f"\nüîß –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ {len(manual_overrides)} —Ä—É—á–Ω–∏—Ö –∫–æ—Ä–µ–≥—É–≤–∞–Ω—å:")
            for key, value in manual_overrides.items():
                old_value = params.get(key, "–Ω–µ –∑–∞–¥–∞–Ω–æ")
                params[key] = value
                print(f"   ‚Ä¢ {key}: {old_value} ‚Üí {value}")
        
        # 3. –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ kwargs
        if kwargs:
            print(f"\n‚öôÔ∏è –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ {len(kwargs)} –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:")
            for key, value in kwargs.items():
                if manual_overrides and key not in manual_overrides:
                    old_value = params.get(key, "–Ω–µ –∑–∞–¥–∞–Ω–æ")
                    params[key] = value
                    print(f"   ‚Ä¢ {key}: {old_value} ‚Üí {value}")
                elif not manual_overrides:
                    old_value = params.get(key, "–Ω–µ –∑–∞–¥–∞–Ω–æ")
                    params[key] = value
                    print(f"   ‚Ä¢ {key}: {old_value} ‚Üí {value}")
        
        # 4. ‚úÖ –î–û–î–ê–Ñ–ú–û progress_callback —Ç–∞ show_evaluation_plots
        if progress_callback:
            params['progress_callback'] = progress_callback
        if show_evaluation_plots:  # ‚úÖ –î–û–î–ê–Ñ–ú–û –ü–ï–†–ï–î–ê–ß–£ –ü–ê–†–ê–ú–ï–¢–†–ê
            params['show_evaluation_plots'] = show_evaluation_plots
        
        # 5. –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        print(f"\n‚úÖ –§—ñ–Ω–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É:")
        key_params = ['model_type', 'Np', 'Nc', 'ref_fe', 'ref_mass', 'w_fe', 'w_mass', 'Œª_obj']
        for param in key_params:
            if param in params:
                print(f"   ‚Ä¢ {param}: {params[param]}")
        
        # 6. –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è simulate_mpc
        filtered_params = _filter_for_simulate_mpc(params)
        
        # 7. –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Å–∏–º—É–ª—è—Ü—ñ—é
        print("üöÄ –í–∏–∫–ª–∏–∫–∞—î–º–æ simulate_mpc...")
        results_df, metrics = simulate_mpc(reference_df, **filtered_params)
        
        # ‚úÖ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í
        if save_results:
            print("\nüíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó...")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–∑–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è–º–∏
            config_save_name = config_name
            if manual_overrides:
                config_save_name += "_modified"
            
            try:
                saved_path = save_simulation_results(results_df, config_save_name, metrics)
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {saved_path}")
                
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                file_size = Path(saved_path).stat().st_size / (1024 * 1024)
                print(f"üìÅ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {file_size:.2f} MB")
                
            except Exception as save_error:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: {save_error}")
        
        return results_df, metrics
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ simulate_mpc_with_config: {e}")
        import traceback
        traceback.print_exc()
        raise

# –¢–∞–∫–æ–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—é —Ñ—É–Ω–∫—Ü—ñ—é validate_config:

def validate_config(config: Dict[str, Any]) -> Tuple[bool, List[str]]:
    """
    –í–∞–ª—ñ–¥—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é L-MPC —Ç–∞ K-MPC.
    
    Args:
        config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª—ñ–¥–Ω–∞, —Å–ø–∏—Å–æ–∫_–ø–æ–º–∏–ª–æ–∫)
    """
    required_params = ['model_type', 'Np', 'Nc', 'N_data', 'control_pts']
    errors = []
    
    for param in required_params:
        if param not in config:
            errors.append(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ —Ç–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤
    if 'Np' in config and (not isinstance(config['Np'], int) or config['Np'] < 1):
        errors.append("Np –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º")
    
    if 'Nc' in config and (not isinstance(config['Nc'], int) or config['Nc'] < 1):
        errors.append("Nc –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º")
    
    # üÜï –†–û–ó–®–ò–†–ï–ù–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø –î–õ–Ø –†–Ü–ó–ù–ò–• –¢–ò–ü–Ü–í –ú–û–î–ï–õ–ï–ô
    model_type = config.get('model_type', '').lower()
    
    if model_type not in ['krr', 'svr', 'linear', 'gpr']:
        errors.append("model_type –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–¥–Ω–∏–º –∑: krr, svr, linear, gpr")
    
    # üéØ –í–ê–õ–Ü–î–ê–¶–Ü–Ø L-MPC –ü–ê–†–ê–ú–ï–¢–†–Ü–í
    if model_type == 'linear':
        linear_type = config.get('linear_type', 'ols')
        if linear_type not in ['ols', 'ridge', 'lasso']:
            errors.append("linear_type –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–¥–Ω–∏–º –∑: ols, ridge, lasso")
            
        poly_degree = config.get('poly_degree', 1)
        if not isinstance(poly_degree, int) or not (1 <= poly_degree <= 3):
            errors.append("poly_degree –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º –≤—ñ–¥ 1 –¥–æ 3")
            
        if linear_type in ['ridge', 'lasso']:
            alpha = config.get('alpha', 1.0)
            if not isinstance(alpha, (int, float)) or alpha <= 0:
                errors.append("alpha –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —á–∏—Å–ª–æ–º –¥–ª—è Ridge/Lasso")
    
    # üéØ –í–ê–õ–Ü–î–ê–¶–Ü–Ø K-MPC –ü–ê–†–ê–ú–ï–¢–†–Ü–í
    elif model_type in ['krr', 'svr']:
        kernel = config.get('kernel', 'rbf')
        valid_kernels = ['rbf', 'linear', 'poly']
        if kernel not in valid_kernels:
            errors.append(f"kernel –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–¥–Ω–∏–º –∑: {', '.join(valid_kernels)}")
    
    return len(errors) == 0, errors

# =============================================================================
# === –£–¢–ò–õ–Ü–¢–ê–†–ù–Ü –§–£–ù–ö–¶–Ü–á ===
# =============================================================================

def get_config_info(config_name: str) -> Optional[Dict[str, Any]]:
    """
    –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –±–µ–∑ –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
    
    Args:
        config_name: –ù–∞–∑–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        
    Returns:
        –°–ª–æ–≤–Ω–∏–∫ –∑ –±–∞–∑–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –∞–±–æ None —è–∫—â–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞
    """
    try:
        config = load_config(config_name)
        return {
            'name': config.get('name', config_name),
            'description': config.get('description', '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'),
            'model_type': config.get('model_type', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'),
            'N_data': config.get('N_data', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'),
            'Np': config.get('Np', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'),
            'Nc': config.get('Nc', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')
        }
    except (FileNotFoundError, ValueError):
        return None

def generate_results_filename(config_name: str, file_format: str = "parquet") -> Path:
    """
    –ì–µ–Ω–µ—Ä—É—î —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ timestamp.
    
    Args:
        config_name: –ù–∞–∑–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        file_format: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É ('parquet', 'csv', 'json')
        
    Returns:
        Path –¥–æ —Ñ–∞–π–ª—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    """
    import pandas as pd
    
    _ensure_results_dir_exists()
    
    timestamp = pd.Timestamp.now().strftime("%Y%m%d_%H%M%S")
    filename = f"mpc_results_{config_name}_{timestamp}.{file_format}"
    
    return _get_results_dir() / filename

def save_simulation_results(results_df: pd.DataFrame, config_name: str, 
                          metrics: Optional[Dict] = None) -> str:
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó –≤ –ø–∞–ø–∫—É mpc_results.
    
    Args:
        results_df: DataFrame –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó
        config_name: –ù–∞–∑–≤–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        metrics: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        
    Returns:
        –®–ª—è—Ö –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    """
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    results_file = generate_results_filename(config_name, "parquet")
    results_df.to_parquet(results_file, index=False)
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ —è–∫—â–æ —î
    if metrics:
        metrics_file = generate_results_filename(config_name, "json")
        metrics_file = metrics_file.with_name(metrics_file.name.replace("mpc_results_", "mpc_metrics_"))
        
        # –û—á–∏—â–∞—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è JSON —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        clean_metrics = {}
        for key, value in metrics.items():
            try:
                import numpy as np
                if isinstance(value, (np.integer, np.floating)):
                    clean_metrics[key] = float(value)
                elif isinstance(value, np.ndarray):
                    clean_metrics[key] = value.tolist()
                elif pd.isna(value):
                    clean_metrics[key] = None
                else:
                    clean_metrics[key] = value
            except:
                clean_metrics[key] = str(value)
        
        with open(metrics_file, 'w', encoding='utf-8') as f:
            json.dump(clean_metrics, f, indent=4, ensure_ascii=False)
    
    return str(results_file)

def list_saved_results() -> List[Dict[str, str]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ñ–∞–π–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    """
    results_dir = _get_results_dir()
    if not results_dir.exists():
        return []
    
    results = []
    for file_path in results_dir.glob("mpc_results_*.parquet"):
        # –ü–∞—Ä—Å–∏–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É: mpc_results_CONFIG_TIMESTAMP.parquet
        name_parts = file_path.stem.split('_')
        if len(name_parts) >= 4:
            config_name = '_'.join(name_parts[2:-2]) if len(name_parts) > 4 else name_parts[2]
            timestamp = '_'.join(name_parts[-2:])
            
            results.append({
                'file': file_path.name,
                'config': config_name,
                'timestamp': timestamp,
                'path': str(file_path),
                'size_mb': file_path.stat().st_size / (1024 * 1024)
            })
    
    return sorted(results, key=lambda x: x['timestamp'], reverse=True)
    """
    –í–∞–ª—ñ–¥—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.
    
    Args:
        config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª—ñ–¥–Ω–∞, —Å–ø–∏—Å–æ–∫_–ø–æ–º–∏–ª–æ–∫)
    """
    required_params = ['model_type', 'Np', 'Nc', 'N_data', 'control_pts']
    errors = []
    
    for param in required_params:
        if param not in config:
            errors.append(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ —Ç–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤
    if 'Np' in config and not isinstance(config['Np'], int) or config['Np'] < 1:
        errors.append("Np –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º")
    
    if 'Nc' in config and not isinstance(config['Nc'], int) or config['Nc'] < 1:
        errors.append("Nc –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º")
    
    if 'model_type' in config and config['model_type'] not in ['krr', 'svr', 'linear', 'gpr']:
        errors.append("model_type –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ–¥–Ω–∏–º –∑: krr, svr, linear, gpr")
    
    return len(errors) == 0, errors

if __name__ == '__main__':
    create_default_configs_ext()
    