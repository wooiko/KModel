# model_lag_comparator.py

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from typing import Dict, List, Tuple, Optional
import json
from datetime import datetime
from pathlib import Path
from model import KernelModel
from data_gen import StatefulDataGenerator

class ModelLagComparator:
    """
    –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —è–¥–µ—Ä–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π (KRR, SVR) 
    –∑ —Ä—ñ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–≥—ñ–≤ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–ø–ª–∏–≤—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ 
    –ª–∞–≥—ñ–≤ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ.
    """
    
    def __init__(self, 
                 reference_df: pd.DataFrame,
                 model_types: List[str] = ["krr", "svr"], 
                 lag_range: List[int] = [2, 4, 6, 8],
                 output_dir: Optional[str] = None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π –∑ —Ä—ñ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–≥—ñ–≤.
        
        Args:
            reference_df: –†–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            model_types: –°–ø–∏—Å–æ–∫ —Ç–∏–ø—ñ–≤ —è–¥–µ—Ä–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            lag_range: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω—å –ª–∞–≥—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        """
        self.reference_df = reference_df
        self.model_types = model_types
        self.lag_range = lag_range
        self.results = {}
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        if output_dir is None:
            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            output_dir = f"lag_comparison/{timestamp}"
        
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        print(f"üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ModelLagComparator")
        print(f"   –ú–æ–¥–µ–ª—ñ: {model_types}")
        print(f"   –õ–∞–≥–∏: {lag_range}")
    
    def create_lagged_matrices(self, df: pd.DataFrame, lag: int = 2) -> Tuple[np.ndarray, np.ndarray]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∞–≥–æ–≤–∏—Ö –º–∞—Ç—Ä–∏—Ü—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—ñ–¥—Ö–æ–¥—É –∑ ModelComparisonService.
        
        Args:
            df: DataFrame –∑ –¥–∞–Ω–∏–º–∏
            lag: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–≥—ñ–≤
            
        Returns:
            Tuple[np.ndarray, np.ndarray]: –ú–∞—Ç—Ä–∏—Ü—ñ X (–≤—Ö–æ–¥–∏) —Ç–∞ Y (–≤–∏—Ö–æ–¥–∏)
        """
        # –í–∏–≤–µ–¥–µ–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
        print(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö –Ω–∞–∑–≤ –∑–º—ñ–Ω–Ω–∏—Ö
        if 'feed_fe_percent' in df.columns:
            input_vars = ['feed_fe_percent', 'ore_mass_flow', 'solid_feed_percent']
        else:
            # –Ø–∫—â–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –Ω–∞–∑–≤ –Ω–µ–º–∞—î, —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
            numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
            print(f"–ß–∏—Å–ª–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏: {numeric_cols}")
            
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ —á–∏—Å–ª–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ —è–∫ –≤—Ö—ñ–¥–Ω—ñ
            input_vars = numeric_cols[:3]
            print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ –≤—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ: {input_vars}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—å–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
        if 'concentrate_fe' in df.columns and 'concentrate_mass' in df.columns:
            output_vars = ['concentrate_fe', 'concentrate_mass']
        elif 'concentrate_fe_percent' in df.columns and 'concentrate_mass_flow' in df.columns:
            output_vars = ['concentrate_fe_percent', 'concentrate_mass_flow']
        else:
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –¥–≤—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ —á–∏—Å–ª–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ —è–∫ –≤–∏—Ö—ñ–¥–Ω—ñ
            numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
            if len(numeric_cols) > 3:
                output_vars = numeric_cols[3:5]
            else:
                # –Ø–∫—â–æ –∫–æ–ª–æ–Ω–æ–∫ –º–µ–Ω—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ –¥–≤—ñ –¥–ª—è –≤—Ö–æ–¥—É —ñ –≤–∏—Ö–æ–¥—É
                output_vars = numeric_cols[:2]
            print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ –≤–∏—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ: {output_vars}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—é—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
        for var_list, var_type in [(input_vars, "–≤—Ö—ñ–¥–Ω—ñ"), (output_vars, "–≤–∏—Ö—ñ–¥–Ω—ñ")]:
            missing = [var for var in var_list if var not in df.columns]
            if missing:
                print(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ {var_type} –∫–æ–ª–æ–Ω–∫–∏: {missing}")
                print(f"üìã –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ StatefulDataGenerator.create_lagged_dataset")
                try:
                    from data_gen import StatefulDataGenerator
                    return StatefulDataGenerator.create_lagged_dataset(df, lags=lag)
                except (ImportError, AttributeError):
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–ª–∏–∫–∞—Ç–∏ StatefulDataGenerator.create_lagged_dataset")
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
                    return self._create_lagged_matrices_fallback(df, lag)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—å –∑ –ª–∞–≥–∞–º–∏
        n = len(df)
        X, Y = [], []
        
        print(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∞–≥–æ–≤–∏—Ö –º–∞—Ç—Ä–∏—Ü—å –∑ {len(input_vars)} –≤—Ö—ñ–¥–Ω–∏–º–∏ —ñ {len(output_vars)} –≤–∏—Ö—ñ–¥–Ω–∏–º–∏ –∑–º—ñ–Ω–Ω–∏–º–∏, lag={lag}")
        
        for i in range(lag, n):
            row = []
            for var in input_vars:
                for j in range(lag + 1):
                    row.append(df[var].iloc[i - j])
            X.append(row)
            Y.append([df[var].iloc[i] for var in output_vars])
        
        X_array = np.array(X)
        Y_array = np.array(Y)
        
        print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –º–∞—Ç—Ä–∏—Ü—ñ: X shape={X_array.shape}, Y shape={Y_array.shape}")
        
        return X_array, Y_array

    def _create_lagged_matrices_fallback(self, df: pd.DataFrame, lag: int) -> Tuple[np.ndarray, np.ndarray]:
        """
        –†–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∞–≥–æ–≤–∏—Ö –º–∞—Ç—Ä–∏—Ü—å, —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –Ω–µ –ø—Ä–∞—Ü—é—î.
        
        Args:
            df: DataFrame –∑ –¥–∞–Ω–∏–º–∏
            lag: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–≥—ñ–≤
            
        Returns:
            Tuple[np.ndarray, np.ndarray]: –ú–∞—Ç—Ä–∏—Ü—ñ X (–≤—Ö–æ–¥–∏) —Ç–∞ Y (–≤–∏—Ö–æ–¥–∏)
        """
        # –í–∏–±–µ—Ä–µ–º–æ –≤—Å—ñ —á–∏—Å–ª–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏
        numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
        
        if len(numeric_cols) < 3:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∏—Å–ª–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ —É –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ñ. –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ {len(numeric_cols)}")
        
        # –†–æ–∑–¥—ñ–ª–∏–º–æ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –≤—Ö—ñ–¥–Ω—ñ —Ç–∞ –≤–∏—Ö—ñ–¥–Ω—ñ
        input_cols = numeric_cols[:-2]  # –í—Å—ñ –∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥–≤–æ—Ö
        output_cols = numeric_cols[-2:]  # –û—Å—Ç–∞–Ω–Ω—ñ –¥–≤—ñ
        
        print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏:")
        print(f"–í—Ö—ñ–¥–Ω—ñ: {input_cols}")
        print(f"–í–∏—Ö—ñ–¥–Ω—ñ: {output_cols}")
        
        n = len(df)
        X, Y = [], []
        
        for i in range(lag, n):
            row = []
            for col in input_cols:
                for j in range(lag + 1):
                    row.append(df[col].iloc[i - j])
            X.append(row)
            Y.append([df[col].iloc[i] for col in output_cols])
        
        return np.array(X), np.array(Y)
    
    def create_simulation_data(self, params: dict) -> Tuple[StatefulDataGenerator, pd.DataFrame]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ StatefulDataGenerator.
        –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –º–µ—Ç–æ–¥—É –≤ ModelComparisonService.
        
        Args:
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó
            
        Returns:
            Tuple[StatefulDataGenerator, pd.DataFrame]: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–∞ —Å–∏–º—É–ª—è—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ
        """
        print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–º—É–ª—è—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        print(f"   N_data: {params.get('N_data', 5000)}")
        print(f"   control_pts: {params.get('control_pts', 500)}")
        print(f"   lag: {params.get('lag', 2)}")
        print(f"   enable_nonlinear: {params.get('enable_nonlinear', False)}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–∏—Ö
        true_gen = StatefulDataGenerator(
            self.reference_df,
            ore_flow_var_pct=3.0,
            time_step_s=params.get('time_step_s', 5),
            time_constants_s=params.get('time_constants_s', {
                'concentrate_fe_percent': 8.0,
                'tailings_fe_percent': 10.0,
                'concentrate_mass_flow': 5.0,
                'tailings_mass_flow': 7.0
            }),
            dead_times_s=params.get('dead_times_s', {
                'concentrate_fe_percent': 20.0,
                'tailings_fe_percent': 25.0,
                'concentrate_mass_flow': 20.0,
                'tailings_mass_flow': 25.0
            }),
            true_model_type=params.get('plant_model_type', 'rf'),
            seed=params.get('seed', 42)
        )
    
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        anomaly_cfg = None
        if params.get('use_anomalies', False):
            try:
                anomaly_cfg = self._create_anomaly_config(
                    N_data=params.get('N_data', 5000),
                    train_frac=params.get('train_size', 0.8),
                    val_frac=params.get('val_size', 0.1),
                    test_frac=params.get('test_size', 0.1),
                    seed=params.get('seed', 42),
                    severity=params.get('anomaly_severity', 'mild')
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–Ω–æ–º–∞–ª—ñ–π: {str(e)}")
                print("   –ê–Ω–æ–º–∞–ª—ñ—ó –Ω–µ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ")
    
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        df_true_orig = true_gen.generate(
            T=params.get('N_data', 5000),
            control_pts=params.get('control_pts', 500),
            n_neighbors=params.get('n_neighbors', 5),
            noise_level=params.get('noise_level', 'none'),
            anomaly_config=anomaly_cfg
        )
    
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É (—è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ)
        if params.get('enable_nonlinear', False):
            if 'nonlinear_config' in params:
                print(f"   –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –¥–∞–Ω–∏—Ö")
                df_true = true_gen.generate_nonlinear_variant(
                    base_df=df_true_orig,
                    non_linear_factors=params['nonlinear_config'],
                    noise_level='none',
                    anomaly_config=anomaly_cfg
                )
            else:
                print("‚ö†Ô∏è –ù–µ –≤–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—Å—Ç—ñ (nonlinear_config)")
                print("   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª—ñ–Ω—ñ–π–Ω—ñ –¥–∞–Ω—ñ")
                df_true = df_true_orig
        else:
            df_true = df_true_orig
    
        print(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –¥–∞—Ç–∞—Å–µ—Ç: {len(df_true)} –∑–∞–ø–∏—Å—ñ–≤")
        return true_gen, df_true
    
    def _create_anomaly_config(self, N_data: int, train_frac: float = 0.7, 
                             val_frac: float = 0.15, test_frac: float = 0.15,
                             seed: int = 42, severity: str = "mild") -> dict:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–Ω–æ–º–∞–ª—ñ–π –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
        
        Args:
            N_data: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ –¥–∞–Ω–∏—Ö
            train_frac: –ß–∞—Å—Ç–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            val_frac: –ß–∞—Å—Ç–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            test_frac: –ß–∞—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
            seed: –í–∏–ø–∞–¥–∫–æ–≤–µ –∑–µ—Ä–Ω–æ
            severity: –†—ñ–≤–µ–Ω—å –∞–Ω–æ–º–∞–ª—ñ–π ('mild', 'medium', 'strong')
            
        Returns:
            dict: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∞–Ω–æ–º–∞–ª—ñ–π
        """
        try:
            # –Ü–º–ø–æ—Ä—Ç –º–µ—Ç–æ–¥—É –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
            from data_gen import StatefulDataGenerator
            if hasattr(StatefulDataGenerator, 'generate_anomaly_config'):
                return StatefulDataGenerator.generate_anomaly_config(
                    N_data=N_data,
                    train_frac=train_frac,
                    val_frac=val_frac,
                    test_frac=test_frac,
                    seed=seed,
                    severity=severity
                )
        except (ImportError, AttributeError):
            pass
        
        # –ë–∞–∑–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è, —è–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
        # –¶–µ —Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è, —è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –º–µ—Ç–æ–¥—É –∑ ModelComparisonService
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ —É –∫–æ–∂–Ω–æ–º—É –Ω–∞–±–æ—Ä—ñ
        n_train = int(N_data * train_frac)
        n_val = int(N_data * val_frac)
        n_test = N_data - n_train - n_val
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∞–Ω–æ–º–∞–ª—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä—ñ–≤–Ω—è
        if severity == 'mild':
            prob = 0.02
            max_duration = 5
        elif severity == 'medium':
            prob = 0.05
            max_duration = 10
        elif severity == 'strong':
            prob = 0.08
            max_duration = 15
        else:
            prob = 0.03
            max_duration = 7
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        np.random.seed(seed)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∞–Ω–æ–º–∞–ª—ñ–π (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)
        anomaly_positions = []
        for i in range(n_val + n_test):
            if np.random.random() < prob:
                duration = np.random.randint(1, max_duration + 1)
                start_pos = n_train + i
                anomaly_positions.append((start_pos, duration))
        
        return {
            'positions': anomaly_positions,
            'severity': severity,
            'probability': prob,
            'max_duration': max_duration,
            'in_train': False,  # –ê–Ω–æ–º–∞–ª—ñ—ó –ª–∏—à–µ –≤ val/test –Ω–∞–±–æ—Ä–∞—Ö
            'in_val': True,
            'in_test': True
        }

    def train_and_evaluate_models(self, X: np.ndarray, Y: np.ndarray, 
                                   lag: int, train_ratio: float = 0.8) -> Dict:
        """
        –ù–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –æ—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É –¥–∞–Ω–∏—Ö –∑ –ª–∞–≥–∞–º–∏.
        
        Args:
            X: –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∑ –ª–∞–≥–∞–º–∏
            Y: –í–∏—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
            lag: –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–≥—ñ–≤ (–¥–ª—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ)
            train_ratio: –ß–∞—Å—Ç–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π
        """
        # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π —Ç–∞ —Ç–µ—Å—Ç–æ–≤–∏–π –Ω–∞–±–æ—Ä–∏
        n = X.shape[0]
        n_train = int(train_ratio * n)
        
        X_train, X_test = X[:n_train], X[n_train:]
        Y_train, Y_test = Y[:n_train], Y[n_train:]
        
        # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        x_scaler = StandardScaler()
        y_scaler = StandardScaler()
        
        X_train_scaled = x_scaler.fit_transform(X_train)
        X_test_scaled = x_scaler.transform(X_test)
        Y_train_scaled = y_scaler.fit_transform(Y_train)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ª–∞–≥—É
        lag_results = {}
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –º–æ–¥–µ–ª—ñ
        for model_type in self.model_types:
            # –Ü–º–ø–æ—Ä—Ç KernelModel –∑ –ø—Ä–æ–µ–∫—Ç—É
            from model import KernelModel
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ
            print(f"   –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ {model_type.upper()} –∑ lag={lag}...")
            
            try:
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —á–µ—Ä–µ–∑ —Ñ–∞—Å–∞–¥ KernelModel
                model = KernelModel(
                    model_type=model_type, 
                    kernel="rbf", 
                    find_optimal_params=True
                )
                
                # –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
                start_time = datetime.now()
                model.fit(X_train_scaled, Y_train_scaled)
                train_time = (datetime.now() - start_time).total_seconds()
                
                # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
                start_time = datetime.now()
                Y_pred_scaled = model.predict(X_test_scaled)
                predict_time = (datetime.now() - start_time).total_seconds()
                
                # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É
                Y_pred = y_scaler.inverse_transform(Y_pred_scaled)
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ü—ñ–Ω–∫–∏
                mse = mean_squared_error(Y_test, Y_pred)
                rmse = np.sqrt(mse)
                r2 = r2_score(Y_test, Y_pred)
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –æ–∫—Ä–µ–º–∏—Ö —Ü—ñ–ª—å–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
                rmse_per_target = []
                r2_per_target = []
                
                for i in range(Y_test.shape[1]):
                    rmse_target = np.sqrt(mean_squared_error(Y_test[:, i], Y_pred[:, i]))
                    r2_target = r2_score(Y_test[:, i], Y_pred[:, i])
                    rmse_per_target.append(rmse_target)
                    r2_per_target.append(r2_target)
                
                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —è–¥—Ä–∞ —á–µ—Ä–µ–∑ _impl (–≤–Ω—É—Ç—Ä—ñ—à–Ω—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è)
                kernel_params = {}
                
                # –î–æ—Å—Ç—É–ø –¥–æ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ _impl
                impl = model._impl
                
                # –î–ª—è KRR
                if model_type == "krr":
                    if hasattr(impl, 'alpha'):
                        kernel_params['alpha'] = impl.alpha
                    if hasattr(impl, 'gamma'):
                        kernel_params['gamma'] = impl.gamma
                    if hasattr(impl, 'model') and hasattr(impl.model, 'alpha'):
                        kernel_params['alpha'] = impl.model.alpha
                    if hasattr(impl, 'model') and hasattr(impl.model, 'gamma'):
                        kernel_params['gamma'] = impl.model.gamma
                
                # –î–ª—è SVR
                elif model_type == "svr":
                    if hasattr(impl, 'C'):
                        kernel_params['C'] = impl.C
                    if hasattr(impl, 'epsilon'):
                        kernel_params['epsilon'] = impl.epsilon
                    if hasattr(impl, 'gamma'):
                        kernel_params['gamma'] = impl.gamma
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª–µ–π (–¥–ª—è –±–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω–∏—Ö –≤–∏—Ö–æ–¥—ñ–≤)
                    if hasattr(impl, 'models') and len(impl.models) > 0:
                        first_model = impl.models[0]
                        if hasattr(first_model, 'C'):
                            kernel_params['C'] = first_model.C
                        if hasattr(first_model, 'epsilon'):
                            kernel_params['epsilon'] = first_model.epsilon
                        if hasattr(first_model, 'gamma'):
                            kernel_params['gamma'] = first_model.gamma
                        if hasattr(first_model, '_actual_gamma'):
                            kernel_params['gamma'] = first_model._actual_gamma
                
                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                lag_results[model_type] = {
                    'lag': lag,
                    'rmse': rmse,
                    'r2': r2,
                    'rmse_per_target': rmse_per_target,
                    'r2_per_target': r2_per_target,
                    'train_time': train_time,
                    'predict_time': predict_time,
                    'kernel_params': kernel_params,
                    'Y_pred': Y_pred.tolist()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
                }
                
                print(f"   {model_type.upper()}: RMSE={rmse:.4f}, R¬≤={r2:.4f}, –ß–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è={train_time:.2f}—Å")
                
                # –í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–¥—Ä–∞
                print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–¥—Ä–∞ –¥–ª—è {model_type.upper()}:")
                for param, value in kernel_params.items():
                    print(f"      {param}: {value}")
            
            except Exception as e:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ {model_type.upper()}: {str(e)}")
                import traceback
                traceback.print_exc()
                continue
        
        return lag_results    
    
    def run_comparison(self, **kwargs) -> Dict:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –∑ —Ä—ñ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–≥—ñ–≤.
        
        Args:
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó, —è–∫—ñ –º–æ–∂—É—Ç—å –≤–∫–ª—é—á–∞—Ç–∏:
                - N_data: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó
                - control_pts: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∏—Ö —Ç–æ—á–æ–∫
                - time_step_s: –ö—Ä–æ–∫ —á–∞—Å—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                - train_size: –ß–∞—Å—Ç–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                - val_size: –ß–∞—Å—Ç–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
                - test_size: –ß–∞—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
                - enable_nonlinear: –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–µ–ª—ñ–Ω—ñ–π–Ω—ñ—Å—Ç—å
                - nonlinear_config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—Å—Ç—ñ
                - noise_level: –†—ñ–≤–µ–Ω—å —à—É–º—É
                - use_anomalies: –ß–∏ –¥–æ–¥–∞–≤–∞—Ç–∏ –∞–Ω–æ–º–∞–ª—ñ—ó
                - anomaly_severity: –†—ñ–≤–µ–Ω—å –∞–Ω–æ–º–∞–ª—ñ–π
                - seed: –í–∏–ø–∞–¥–∫–æ–≤–µ –∑–µ—Ä–Ω–æ
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        """
        print(f"üìä –ü–æ—á–∞—Ç–æ–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –∑ —Ä—ñ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–≥—ñ–≤...")
        
        # –ë–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó
        base_params = {
            'N_data': kwargs.get('N_data', 5000),
            'control_pts': kwargs.get('control_pts', 500),
            'train_size': kwargs.get('train_size', 0.8),
            'val_size': kwargs.get('val_size', 0.1),
            'test_size': kwargs.get('test_size', 0.1),
            'time_step_s': kwargs.get('time_step_s', 5),
            'time_constants_s': kwargs.get('time_constants_s', {
                'concentrate_fe_percent': 8.0,
                'tailings_fe_percent': 10.0,
                'concentrate_mass_flow': 5.0,
                'tailings_mass_flow': 7.0
            }),
            'dead_times_s': kwargs.get('dead_times_s', {
                'concentrate_fe_percent': 20.0,
                'tailings_fe_percent': 25.0,
                'concentrate_mass_flow': 20.0,
                'tailings_mass_flow': 25.0
            }),
            'plant_model_type': kwargs.get('plant_model_type', 'rf'),
            'n_neighbors': kwargs.get('n_neighbors', 5),
            'noise_level': kwargs.get('noise_level', 'none'),
            'enable_nonlinear': kwargs.get('enable_nonlinear', False),
            'nonlinear_config': kwargs.get('nonlinear_config', {
                'concentrate_fe_percent': ('pow', 2.0),
                'concentrate_mass_flow': ('pow', 1.5)
            }),
            'use_anomalies': kwargs.get('use_anomalies', False),
            'anomaly_severity': kwargs.get('anomaly_severity', 'mild'),
            'seed': kwargs.get('seed', 42)
        }
        
        # –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö
        print("\n–ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö:")
        print(f"–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É: {self.reference_df.shape}")
        print(f"–ö–æ–ª–æ–Ω–∫–∏: {self.reference_df.columns.tolist()}")
        print("\n")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        results = {
            'base_params': base_params,
            'lag_results': {},
            'best_lags': {},
            'model_comparison': {}
        }
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é –∞–±–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        use_simulation = kwargs.get('use_simulation', True)
        
        if use_simulation:
            print("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏–º—É–ª—è—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ")
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏–º—É–ª—è—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ –æ–¥–∏–Ω —Ä–∞–∑
            sim_params = base_params.copy()
            true_gen, df_sim = self.create_simulation_data(sim_params)
            print(f"   –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–∏–º—É–ª—è—Ü—ñ–π–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç: {len(df_sim)} –∑–∞–ø–∏—Å—ñ–≤")
        else:
            print("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É")
            df_sim = self.reference_df
        
        # –¶–∏–∫–ª –ø–æ —Ä—ñ–∑–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –ª–∞–≥—ñ–≤
        for lag in self.lag_range:
            print(f"\nüîÑ –ê–Ω–∞–ª—ñ–∑ lag={lag}")
            
            try:
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∞–≥–æ–≤–∏—Ö –º–∞—Ç—Ä–∏—Ü—å –∑ –¥–∞–Ω–∏—Ö (—Å–∏–º—É–ª—è—Ü—ñ–π–Ω–∏—Ö –∞–±–æ —Ä–µ–∞–ª—å–Ω–∏—Ö)
                X, Y = self.create_lagged_matrices(df_sim, lag)
                
                if X.shape[0] == 0:
                    print(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è lag={lag}")
                    continue
                
                print(f"   –†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å: X{X.shape}, Y{Y.shape}")
                
                # –ù–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –æ—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π
                lag_results = self.train_and_evaluate_models(X, Y, lag, train_ratio=base_params['train_size'])
                
                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ª–∞–≥—É
                results['lag_results'][lag] = lag_results
                
            except Exception as e:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ lag={lag}: {str(e)}")
                import traceback
                traceback.print_exc()
                continue
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        if not results['lag_results']:
            print("‚ùå –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            return results
        
        # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–∏—Ö –ª–∞–≥—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–¥–µ–ª—ñ
        for model_type in self.model_types:
            best_lag = self._find_best_lag(results['lag_results'], model_type)
            if best_lag is not None:
                results['best_lags'][model_type] = best_lag
                print(f"\n‚úÖ –ù–∞–π–∫—Ä–∞—â–∏–π lag –¥–ª—è {model_type.upper()}: {best_lag}")
            else:
                print(f"\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π lag –¥–ª—è {model_type.upper()}")
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö –ª–∞–≥–∞—Ö
        results['model_comparison'] = self._compare_models(results['lag_results'])
        
        self.results = results
        return results
     
    def _find_best_lag(self, lag_results: Dict, model_type: str) -> int:
        """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –ª–∞–≥—É –¥–ª—è –º–æ–¥–µ–ª—ñ"""
        best_rmse = float('inf')
        best_lag = None
        
        for lag, results in lag_results.items():
            if model_type in results:
                rmse = results[model_type]['rmse']
                if rmse < best_rmse:
                    best_rmse = rmse
                    best_lag = lag
        
        return best_lag
    
    def _compare_models(self, lag_results: Dict) -> Dict:
        """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –Ω–∞ –∫—Ä–∞—â–∏—Ö –ª–∞–≥–∞—Ö"""
        comparison = {}
        
        for model_type in self.model_types:
            best_lag = self._find_best_lag(lag_results, model_type)
            if best_lag and best_lag in lag_results:
                if model_type in lag_results[best_lag]:
                    comparison[model_type] = {
                        'best_lag': best_lag,
                        'metrics': lag_results[best_lag][model_type]
                    }
        
        return comparison
    
    def plot_results(self) -> None:
        """
        –ö–æ–º–ø–∞–∫—Ç–Ω–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –∑ —Ä—ñ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–≥—ñ–≤.
        """
        if not self.results:
            raise ValueError("–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó. –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å run_comparison()")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—ó —Ñ—ñ–≥—É—Ä–∏
        fig, axes = plt.subplots(2, 2, figsize=(10, 8), dpi=100)
        
        # –ö–æ–ª—ñ—Ä–Ω–∞ —Å—Ö–µ–º–∞
        colors = {'krr': 'blue', 'svr': 'red', 'gpr': 'green'}
        
        # –ì—Ä–∞—Ñ—ñ–∫ 1: RMSE vs Lag
        ax = axes[0, 0]
        for model_type in self.model_types:
            lags = []
            rmse_values = []
            
            for lag in self.lag_range:
                if lag in self.results['lag_results']:
                    if model_type in self.results['lag_results'][lag]:
                        lags.append(lag)
                        rmse_values.append(self.results['lag_results'][lag][model_type]['rmse'])
            
            if lags:
                ax.plot(lags, rmse_values, 
                       marker='o', linewidth=1.5, markersize=4,
                       color=colors.get(model_type, 'black'),
                       label=f'{model_type.upper()}')
                
                # –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –ª–∞–≥—É –∑—ñ—Ä–æ—á–∫–æ—é –±–µ–∑ –ø—ñ–¥–ø–∏—Å—ñ–≤
                best_lag = self.results['best_lags'].get(model_type)
                if best_lag in lags:
                    best_idx = lags.index(best_lag)
                    ax.scatter(best_lag, rmse_values[best_idx], 
                               s=80, color=colors.get(model_type), 
                               marker='*', zorder=5)
        
        ax.set_xlabel('–õ–∞–≥')
        ax.set_ylabel('RMSE')
        ax.set_title('RMSE')
        ax.legend(fontsize=8)
        ax.grid(True, alpha=0.2)
        
        # –ì—Ä–∞—Ñ—ñ–∫ 2: R¬≤ vs Lag
        ax = axes[0, 1]
        for model_type in self.model_types:
            lags = []
            r2_values = []
            
            for lag in self.lag_range:
                if lag in self.results['lag_results']:
                    if model_type in self.results['lag_results'][lag]:
                        if 'r2' in self.results['lag_results'][lag][model_type]:
                            lags.append(lag)
                            r2_values.append(self.results['lag_results'][lag][model_type]['r2'])
            
            if lags:
                ax.plot(lags, r2_values, 
                       marker='o', linewidth=1.5, markersize=4,
                       color=colors.get(model_type, 'black'),
                       label=f'{model_type.upper()}')
                
                # –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –ª–∞–≥—É –∑—ñ—Ä–æ—á–∫–æ—é –±–µ–∑ –ø—ñ–¥–ø–∏—Å—ñ–≤
                best_lag = self.results['best_lags'].get(model_type)
                if best_lag in lags:
                    best_idx = lags.index(best_lag)
                    ax.scatter(best_lag, r2_values[best_idx], 
                               s=80, color=colors.get(model_type), 
                               marker='*', zorder=5)
        
        ax.set_xlabel('–õ–∞–≥')
        ax.set_ylabel('R¬≤')
        ax.set_title('–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–µ—Ç–µ—Ä–º—ñ–Ω–∞—Ü—ñ—ó')
        ax.legend(fontsize=8)
        ax.grid(True, alpha=0.2)
        
        # –ì—Ä–∞—Ñ—ñ–∫ 3: –ß–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è vs Lag
        ax = axes[1, 0]
        for model_type in self.model_types:
            lags = []
            times = []
            
            for lag in self.lag_range:
                if lag in self.results['lag_results']:
                    if model_type in self.results['lag_results'][lag]:
                        if 'train_time' in self.results['lag_results'][lag][model_type]:
                            lags.append(lag)
                            times.append(self.results['lag_results'][lag][model_type]['train_time'])
            
            if lags:
                ax.plot(lags, times, 
                       marker='o', linewidth=1.5, markersize=4,
                       color=colors.get(model_type, 'black'),
                       label=f'{model_type.upper()}')
        
        ax.set_xlabel('–õ–∞–≥')
        ax.set_ylabel('–ß–∞—Å (—Å)')
        ax.set_title('–ß–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è')
        ax.legend(fontsize=8)
        ax.grid(True, alpha=0.2)
        
        # –ì—Ä–∞—Ñ—ñ–∫ 4: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–¥—Ä–∞ vs Lag
        ax = axes[1, 1]
        for model_type in self.model_types:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            param_to_plot = None
            if model_type == 'krr':
                param_to_plot = 'alpha'
            elif model_type == 'svr':
                param_to_plot = 'C'
            else:
                param_to_plot = 'gamma'
                
            lags = []
            param_values = []
            
            for lag in self.lag_range:
                if lag in self.results['lag_results']:
                    if model_type in self.results['lag_results'][lag]:
                        kernel_params = self.results['lag_results'][lag][model_type].get('kernel_params', {})
                        if param_to_plot in kernel_params:
                            lags.append(lag)
                            param_values.append(kernel_params[param_to_plot])
            
            if lags:
                ax.plot(lags, param_values, 
                       marker='o', linewidth=1.5, markersize=4,
                       color=colors.get(model_type, 'black'),
                       label=f'{model_type.upper()} - {param_to_plot}')
        
        ax.set_xlabel('–õ–∞–≥')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–Ω—è')
        ax.set_title('–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–¥—Ä–∞')
        ax.legend(fontsize=8)
        ax.grid(True, alpha=0.2)
        
        # –õ–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–∞ —à–∫–∞–ª–∞ –¥–ª—è –∑–Ω–∞—á–µ–Ω—å, —è–∫—â–æ —Ä–æ–∑–∫–∏–¥ –≤–µ–ª–∏–∫–∏–π
        if ax.get_ylim()[1] / max(1e-10, ax.get_ylim()[0]) > 100:
            ax.set_yscale('log')
        
        # –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        fig.suptitle('–í–ø–ª–∏–≤ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∞–≥—ñ–≤ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª–µ–π', fontsize=12)
        
        plt.tight_layout()
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        plot_path = self.output_dir / 'lag_comparison_results.png'
        plt.savefig(plot_path, dpi=300, bbox_inches='tight')
        plt.show()
        
        print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {plot_path}")  
        
    def _plot_metric_vs_lag(self, ax, metric_name, metric_label, colors, lower_is_better=True):
        """–î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫–∏ –≤—ñ–¥ –ª–∞–≥—É"""
        for model_type in self.model_types:
            lags = []
            metric_values = []
            
            for lag in self.lag_range:
                if lag in self.results['lag_results']:
                    if model_type in self.results['lag_results'][lag]:
                        lags.append(lag)
                        metric_values.append(self.results['lag_results'][lag][model_type][metric_name])
            
            if lags:
                ax.plot(lags, metric_values, 
                       marker='o', linewidth=2, markersize=6,
                       color=colors.get(model_type, 'black'),
                       label=f'{model_type.upper()}')
                
                # –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –ª–∞–≥—É
                best_lag = self.results['best_lags'].get(model_type)
                if best_lag in lags:
                    best_idx = lags.index(best_lag)
                    ax.scatter(best_lag, metric_values[best_idx], 
                              s=100, color=colors.get(model_type), 
                              marker='*', zorder=5)
                    ax.annotate(f'–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π lag={best_lag}', 
                               xy=(best_lag, metric_values[best_idx]),
                               xytext=(10, 10), textcoords='offset points',
                               fontsize=9, alpha=0.8)
        
        ax.set_xlabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–≥—ñ–≤')
        ax.set_ylabel(metric_label)
        ax.set_title(f'{metric_label} –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∞–≥—ñ–≤')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_kernel_params(self, ax, colors):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —è–¥—Ä–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ª–∞–≥—É"""
        for model_type in self.model_types:
            lags = []
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ø—ñ–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤—Å—ñ—Ö –ª–∞–≥—ñ–≤ —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ
            common_params = set()
            first = True
            
            for lag in self.lag_range:
                if lag in self.results['lag_results']:
                    if model_type in self.results['lag_results'][lag]:
                        kernel_params = self.results['lag_results'][lag][model_type].get('kernel_params', {})
                        if first:
                            common_params = set(kernel_params.keys())
                            first = False
                        else:
                            common_params &= set(kernel_params.keys())
            
            if not common_params:
                continue
                
            # –î–ª—è KRR —ñ SVR –≤–∏–±–µ—Ä–µ–º–æ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            param_to_plot = None
            if model_type == 'krr' and 'alpha' in common_params:
                param_to_plot = 'alpha'
            elif model_type == 'svr' and 'C' in common_params:
                param_to_plot = 'C'
            elif 'gamma' in common_params:
                param_to_plot = 'gamma'
            
            if not param_to_plot:
                continue
            
            # –ó–±–∏—Ä–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ª–∞–≥—ñ–≤
            param_values = []
            lags = []
            
            for lag in self.lag_range:
                if lag in self.results['lag_results']:
                    if model_type in self.results['lag_results'][lag]:
                        kernel_params = self.results['lag_results'][lag][model_type].get('kernel_params', {})
                        if param_to_plot in kernel_params:
                            lags.append(lag)
                            param_values.append(kernel_params[param_to_plot])
            
            if lags:
                ax.plot(lags, param_values, 
                       marker='o', linewidth=2, markersize=6,
                       color=colors.get(model_type, 'black'),
                       label=f'{model_type.upper()} - {param_to_plot}')
        
        ax.set_xlabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–≥—ñ–≤')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É')
        ax.set_title('–ó–º—ñ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —è–¥—Ä–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ª–∞–≥—ñ–≤')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # –õ–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–∞ —à–∫–∞–ª–∞ –¥–ª—è –∑–Ω–∞—á–µ–Ω—å, —è–∫—â–æ —Ä–æ–∑–∫–∏–¥ –≤–µ–ª–∏–∫–∏–π
        if ax.get_ylim()[1] / max(1e-10, ax.get_ylim()[0]) > 100:
            ax.set_yscale('log')
    
    def save_results(self, filename: Optional[str] = None) -> str:
        """
        –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —É JSON.
        
        Args:
            filename: –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            
        Returns:
            str: –®–ª—è—Ö –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        """
        if not self.results:
            raise ValueError("–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
        
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f'lag_comparison_{timestamp}.json'
        
        filepath = self.output_dir / filename
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç, —è–∫–∏–π –º–æ–∂–Ω–∞ —Å–µ—Ä—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏
        serializable_results = {}
        
        for key, value in self.results.items():
            if isinstance(value, dict):
                serializable_results[key] = {}
                for k, v in value.items():
                    if isinstance(v, dict):
                        serializable_results[key][k] = {}
                        for kk, vv in v.items():
                            if isinstance(vv, dict):
                                serializable_results[key][k][kk] = {}
                                for kkk, vvv in vv.items():
                                    if isinstance(vvv, np.ndarray):
                                        serializable_results[key][k][kk][kkk] = vvv.tolist()
                                    elif isinstance(vvv, (np.int64, np.float64)):
                                        serializable_results[key][k][kk][kkk] = float(vvv)
                                    else:
                                        serializable_results[key][k][kk][kkk] = vvv
                            elif isinstance(vv, np.ndarray):
                                serializable_results[key][k][kk] = vv.tolist()
                            elif isinstance(vv, (np.int64, np.float64)):
                                serializable_results[key][k][kk] = float(vv)
                            else:
                                serializable_results[key][k][kk] = vv
                    else:
                        serializable_results[key][k] = v
            else:
                serializable_results[key] = value
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(serializable_results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filepath}")
        return str(filepath)
    
    def generate_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.
        
        Returns:
            str: –¢–µ–∫—Å—Ç –∑–≤—ñ—Ç—É
        """
        if not self.results:
            raise ValueError("–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –∑–≤—ñ—Ç—É")
        
        report = f"""
–ó–í–Ü–¢ –ü–†–û –í–ü–õ–ò–í –ö–Ü–õ–¨–ö–û–°–¢–Ü –õ–ê–ì–Ü–í –ù–ê –ü–ê–†–ê–ú–ï–¢–†–ò –ú–û–î–ï–õ–ï–ô
{'='*55}

–ü–ê–†–ê–ú–ï–¢–†–ò –ê–ù–ê–õ–Ü–ó–£:
    –ú–æ–¥–µ–ª—ñ: {', '.join([m.upper() for m in self.model_types])}
    –î—ñ–∞–ø–∞–∑–æ–Ω –ª–∞–≥—ñ–≤: {self.lag_range}
    –î–∞—Ç–∞ –∞–Ω–∞–ª—ñ–∑—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

–ù–ê–ô–ö–†–ê–©–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ó–ê –ú–û–î–ï–õ–Ø–ú–ò:
"""
        
        for model_type in self.model_types:
            if model_type in self.results['model_comparison']:
                comp_data = self.results['model_comparison'][model_type]
                metrics = comp_data['metrics']
                
                report += f"""
    {model_type.upper()}:
        –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π lag: {comp_data['best_lag']}
        RMSE: {metrics['rmse']:.6f}
        R¬≤ Score: {metrics['r2']:.6f}
        –ß–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è: {metrics['train_time']:.3f} —Å
"""
                # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–¥—Ä–∞
                if 'kernel_params' in metrics:
                    report += f"        –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–¥—Ä–∞:\n"
                    for param, value in metrics['kernel_params'].items():
                        report += f"            {param}: {value}\n"
        
        # –î–æ–¥–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        report += f"\n–ê–ù–ê–õ–Ü–ó –ó–ú–Ü–ù–ò –ü–ê–†–ê–ú–ï–¢–†–Ü–í –í –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü –í–Ü–î –õ–ê–ì–£:\n"
        
        for model_type in self.model_types:
            report += f"\n    {model_type.upper()}:\n"
            report += f"        {'–õ–∞–≥':<6} {'RMSE':<10} {'R¬≤':<10} {'–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–¥—Ä–∞'}\n"
            report += f"        {'-'*50}\n"
            
            for lag in sorted(self.lag_range):
                if lag in self.results['lag_results']:
                    if model_type in self.results['lag_results'][lag]:
                        data = self.results['lag_results'][lag][model_type]
                        kernel_params = data.get('kernel_params', {})
                        
                        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–¥—Ä–∞
                        params_str = ", ".join([f"{k}={v:.6g}" for k, v in kernel_params.items()])
                        
                        report += f"        {lag:<6} {data['rmse']:<10.6f} {data['r2']:<10.6f} {params_str}\n"
        
        # –í–∏—Å–Ω–æ–≤–∫–∏
        report += f"\n–í–ò–°–ù–û–í–ö–ò:\n"
        
        for model_type in self.model_types:
            if model_type in self.results['best_lags']:
                best_lag = self.results['best_lags'][model_type]
                
                # –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ
                params_trend = {}
                
                for param_name in ['alpha', 'C', 'gamma', 'epsilon']:
                    values = []
                    lags = []
                    
                    for lag in sorted(self.lag_range):
                        if lag in self.results['lag_results']:
                            if model_type in self.results['lag_results'][lag]:
                                kernel_params = self.results['lag_results'][lag][model_type].get('kernel_params', {})
                                if param_name in kernel_params:
                                    lags.append(lag)
                                    values.append(kernel_params[param_name])
                    
                    if values:
                        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç—Ä–µ–Ω–¥ (–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è/—Å–ø–∞–¥–∞–Ω–Ω—è)
                        if len(values) >= 2:
                            if values[-1] > values[0]:
                                trend = "–∑—Ä–æ—Å—Ç–∞—î"
                            elif values[-1] < values[0]:
                                trend = "—Å–ø–∞–¥–∞—î"
                            else:
                                trend = "–Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è"
                            
                            params_trend[param_name] = trend
                
                # –î–æ–¥–∞—î–º–æ –≤–∏—Å–Ω–æ–≤–∫–∏ –ø–æ –º–æ–¥–µ–ª—ñ
                report += f"\n    {model_type.upper()}:\n"
                report += f"        –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–≥—ñ–≤: {best_lag}\n"
                
                # –î–æ–¥–∞—î–º–æ –≤–∏—Å–Ω–æ–≤–∫–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                for param, trend in params_trend.items():
                    report += f"        –ü–∞—Ä–∞–º–µ—Ç—Ä {param} {trend} –∑—ñ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∞–≥—ñ–≤\n"
        
        report += f"\n{'='*55}\n"
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
        report_path = self.output_dir / 'lag_comparison_report.txt'
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"üìù –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {report_path}")
        return report
        
# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª–∞—Å—É
# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª–∞—Å—É ModelLagComparator –∑ —Å–∏–º—É–ª—è—Ü—ñ—î—é –¥–∞–Ω–∏—Ö

def run_lag_comparison_example(df_path='processed.parquet', use_simulation=True):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª–∞—Å—É ModelLagComparator
    –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤–ø–ª–∏–≤—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∞–≥—ñ–≤ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª–µ–π.
    
    Args:
        df_path: –®–ª—è—Ö –¥–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É
        use_simulation: –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é –¥–∞–Ω–∏—Ö
        
    Returns:
        ModelLagComparator: –ï–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    print("=" * 70)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –í–ü–õ–ò–í–£ –ö–Ü–õ–¨–ö–û–°–¢–Ü –õ–ê–ì–Ü–í –ù–ê –ü–ê–†–ê–ú–ï–¢–†–ò –ú–û–î–ï–õ–ï–ô")
    print("=" * 70)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    try:
        import pandas as pd
        from model_lag_comparator import ModelLagComparator
        
        df = pd.read_parquet(df_path)
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤ –∑ {df_path}")
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª '{df_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return None
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {str(e)}")
        return None
    
    print("\n–ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ:")
    print(df.head())
    print(f"–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö: {df.shape}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
    lag_comparator = ModelLagComparator(
        reference_df=df,
        model_types=["krr", "svr", 'gpr'],  # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ Kernel Ridge —ñ Support Vector Regression
        lag_range=[2, 4, 6, 8, 10, 12, 14, 16],  # –†—ñ–∑–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ª–∞–≥—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        output_dir="lag_comparison_results"
    )
    
    # –ó–∞–ø—É—Å–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó
    print("\nüìä –ó–∞–ø—É—Å–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –∑ —Ä—ñ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–≥—ñ–≤...")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ use_simulation=True)
    simulation_params = {
        'N_data': 3000,           # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ –¥–∞–Ω–∏—Ö
        'control_pts': 300,       # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ñ —Ç–æ—á–∫–∏
        'train_size': 0.8,        # –ß–∞—Å—Ç–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        'val_size': 0.1,          # –ß–∞—Å—Ç–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        'test_size': 0.1,         # –ß–∞—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        'time_step_s': 5,         # –ö—Ä–æ–∫ —á–∞—Å—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        'noise_level': 'none',     # –†—ñ–≤–µ–Ω—å —à—É–º—É
        'enable_nonlinear': True, # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–µ–ª—ñ–Ω—ñ–π–Ω—ñ—Å—Ç—å
        'nonlinear_config': {     # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—Å—Ç—ñ
            'concentrate_fe_percent': ('pow', 1.8),
            'concentrate_mass_flow': ('pow', 1.4)
        },
        'use_simulation': use_simulation,  # –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é
        'seed': 42                # –í–∏–ø–∞–¥–∫–æ–≤–µ –∑–µ—Ä–Ω–æ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞–Ω–æ—Å—Ç—ñ
    }
    
    # –ó–∞–ø—É—Å–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    results = lag_comparator.run_comparison(**simulation_params)
    
    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print("\nüìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π...")
    try:
        lag_comparator.plot_results()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π: {str(e)}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –≤–∏–≤—ñ–¥ –∑–≤—ñ—Ç—É
    print("\nüìù –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É...")
    try:
        report = lag_comparator.generate_report()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: {str(e)}")
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print("\nüíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...")
    try:
        lag_comparator.save_results("lag_comparison_results.json")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {str(e)}")
    
    print("\n" + "=" * 70)
    print("–í–ò–°–ù–û–í–ö–ò:")
    
    # –í–∏–≤—ñ–¥ –∫–ª—é—á–æ–≤–∏—Ö –≤–∏—Å–Ω–æ–≤–∫—ñ–≤
    for model_type in lag_comparator.model_types:
        if model_type in lag_comparator.results.get('best_lags', {}):
            best_lag = lag_comparator.results['best_lags'][model_type]
            print(f"\nüìå –î–ª—è –º–æ–¥–µ–ª—ñ {model_type.upper()}:")
            print(f"   ‚ñ∂ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–≥—ñ–≤: {best_lag}")
            
            # –ê–Ω–∞–ª—ñ–∑ –≤–ø–ª–∏–≤—É –ª–∞–≥—ñ–≤ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ
            param_changes = {}
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª—é—á–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–¥–µ–ª—ñ
            key_param = 'alpha' if model_type == 'krr' else 'C' if model_type == 'svr' else None
            
            if key_param:
                values = []
                lags = []
                
                # –ó–±–∏—Ä–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ª–∞–≥—ñ–≤
                for lag in sorted(lag_comparator.lag_range):
                    if lag in lag_comparator.results.get('lag_results', {}):
                        if model_type in lag_comparator.results['lag_results'][lag]:
                            kernel_params = lag_comparator.results['lag_results'][lag][model_type].get('kernel_params', {})
                            if key_param in kernel_params:
                                lags.append(lag)
                                values.append(kernel_params[key_param])
                
                if len(values) >= 2:
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç—Ä–µ–Ω–¥ –∑–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    if values[-1] > values[0] * 1.1:  # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω–∞ 10%
                        trend = "–∑–Ω–∞—á–Ω–æ –∑—Ä–æ—Å—Ç–∞—î"
                    elif values[-1] > values[0]:
                        trend = "–∑—Ä–æ—Å—Ç–∞—î"
                    elif values[-1] < values[0] * 0.9:  # –ó–º–µ–Ω—à–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω–∞ 10%
                        trend = "–∑–Ω–∞—á–Ω–æ –∑–º–µ–Ω—à—É—î—Ç—å—Å—è"
                    elif values[-1] < values[0]:
                        trend = "–∑–º–µ–Ω—à—É—î—Ç—å—Å—è"
                    else:
                        trend = "—Å—É—Ç—Ç—î–≤–æ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è"
                    
                    param_changes[key_param] = trend
                    
                    print(f"   ‚ñ∂ –ü–∞—Ä–∞–º–µ—Ç—Ä {key_param} {trend} –∑—ñ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∞–≥—ñ–≤")
                    print(f"     (–∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ª–∞–≥—ñ–≤ {lags}: {[round(v, 6) for v in values]})")
    
    print("\n" + "=" * 70)
    print("‚úÖ –ê–ù–ê–õ–Ü–ó –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {lag_comparator.output_dir}")
    print("=" * 70)
    
    return lag_comparator

def check_krr(df_path='processed.parquet', use_simulation=True):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª–∞—Å—É ModelLagComparator
    –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤–ø–ª–∏–≤—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∞–≥—ñ–≤ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª–µ–π.
    
    Args:
        df_path: –®–ª—è—Ö –¥–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É
        use_simulation: –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é –¥–∞–Ω–∏—Ö
        
    Returns:
        ModelLagComparator: –ï–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    print("=" * 70)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –í–ü–õ–ò–í–£ –ö–Ü–õ–¨–ö–û–°–¢–Ü –õ–ê–ì–Ü–í –ù–ê –ü–ê–†–ê–ú–ï–¢–†–ò –ú–û–î–ï–õ–ï–ô")
    print("=" * 70)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    try:
        import pandas as pd
        from model_lag_comparator import ModelLagComparator
        
        df = pd.read_parquet(df_path)
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤ –∑ {df_path}")
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª '{df_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return None
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {str(e)}")
        return None
    
    print("\n–ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ:")
    print(df.head())
    print(f"–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö: {df.shape}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
    lag_comparator = ModelLagComparator(
        reference_df=df,
        model_types=["krr"],  # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ Kernel Ridge —ñ Support Vector Regression
        lag_range=[2, 4, 6, 8, 10, 12, 14, 16],  # –†—ñ–∑–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ª–∞–≥—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        output_dir="lag_comparison_results"
    )
    
    # –ó–∞–ø—É—Å–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó
    print("\nüìä –ó–∞–ø—É—Å–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –∑ —Ä—ñ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–≥—ñ–≤...")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ use_simulation=True)
    simulation_params = {
        'N_data': 5000,           # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ –¥–∞–Ω–∏—Ö
        'control_pts': 500,       # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ñ —Ç–æ—á–∫–∏
        'train_size': 0.88,        # –ß–∞—Å—Ç–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        'val_size': 0.08,          # –ß–∞—Å—Ç–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        'test_size': 0.04,         # –ß–∞—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        'time_step_s': 5,         # –ö—Ä–æ–∫ —á–∞—Å—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        'noise_level': 'none',     # –†—ñ–≤–µ–Ω—å —à—É–º—É
        'enable_nonlinear': True, # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–µ–ª—ñ–Ω—ñ–π–Ω—ñ—Å—Ç—å
        'nonlinear_config': {     # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—Å—Ç—ñ
            'concentrate_fe_percent': ('pow', 2.0),
            'concentrate_mass_flow': ('pow', 1.5)
        },
        'use_simulation': use_simulation,  # –ß–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é
        'seed': 42                # –í–∏–ø–∞–¥–∫–æ–≤–µ –∑–µ—Ä–Ω–æ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞–Ω–æ—Å—Ç—ñ
    }
    
    # –ó–∞–ø—É—Å–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    results = lag_comparator.run_comparison(**simulation_params)
    
    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print("\nüìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π...")
    try:
        lag_comparator.plot_results()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ–π: {str(e)}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –≤–∏–≤—ñ–¥ –∑–≤—ñ—Ç—É
    print("\nüìù –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É...")
    try:
        report = lag_comparator.generate_report()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: {str(e)}")
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print("\nüíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...")
    try:
        lag_comparator.save_results("lag_comparison_results.json")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {str(e)}")
    
    print("\n" + "=" * 70)
    print("–í–ò–°–ù–û–í–ö–ò:")
    
    # –í–∏–≤—ñ–¥ –∫–ª—é—á–æ–≤–∏—Ö –≤–∏—Å–Ω–æ–≤–∫—ñ–≤
    for model_type in lag_comparator.model_types:
        if model_type in lag_comparator.results.get('best_lags', {}):
            best_lag = lag_comparator.results['best_lags'][model_type]
            print(f"\nüìå –î–ª—è –º–æ–¥–µ–ª—ñ {model_type.upper()}:")
            print(f"   ‚ñ∂ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–≥—ñ–≤: {best_lag}")
            
            # –ê–Ω–∞–ª—ñ–∑ –≤–ø–ª–∏–≤—É –ª–∞–≥—ñ–≤ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ
            param_changes = {}
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª—é—á–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–¥–µ–ª—ñ
            key_param = 'alpha' if model_type == 'krr' else 'C' if model_type == 'svr' else None
            
            if key_param:
                values = []
                lags = []
                
                # –ó–±–∏—Ä–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ª–∞–≥—ñ–≤
                for lag in sorted(lag_comparator.lag_range):
                    if lag in lag_comparator.results.get('lag_results', {}):
                        if model_type in lag_comparator.results['lag_results'][lag]:
                            kernel_params = lag_comparator.results['lag_results'][lag][model_type].get('kernel_params', {})
                            if key_param in kernel_params:
                                lags.append(lag)
                                values.append(kernel_params[key_param])
                
                if len(values) >= 2:
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç—Ä–µ–Ω–¥ –∑–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    if values[-1] > values[0] * 1.1:  # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω–∞ 10%
                        trend = "–∑–Ω–∞—á–Ω–æ –∑—Ä–æ—Å—Ç–∞—î"
                    elif values[-1] > values[0]:
                        trend = "–∑—Ä–æ—Å—Ç–∞—î"
                    elif values[-1] < values[0] * 0.9:  # –ó–º–µ–Ω—à–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω–∞ 10%
                        trend = "–∑–Ω–∞—á–Ω–æ –∑–º–µ–Ω—à—É—î—Ç—å—Å—è"
                    elif values[-1] < values[0]:
                        trend = "–∑–º–µ–Ω—à—É—î—Ç—å—Å—è"
                    else:
                        trend = "—Å—É—Ç—Ç—î–≤–æ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è"
                    
                    param_changes[key_param] = trend
                    
                    print(f"   ‚ñ∂ –ü–∞—Ä–∞–º–µ—Ç—Ä {key_param} {trend} –∑—ñ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∞–≥—ñ–≤")
                    print(f"     (–∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ª–∞–≥—ñ–≤ {lags}: {[round(v, 6) for v in values]})")
    
    print("\n" + "=" * 70)
    print("‚úÖ –ê–ù–ê–õ–Ü–ó –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {lag_comparator.output_dir}")
    print("=" * 70)
    
    return lag_comparator
if __name__ == "__main__":
    run_lag_comparison_example()