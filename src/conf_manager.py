# conf_manager.py

import json
import yaml
from pathlib import Path
from typing import Dict, Any, Optional
import pandas as pd

class MPCConfigManager:
    def __init__(self, config_dir: str = "mpc_configs"):
        self.config_dir = Path(config_dir)
        self.config_dir.mkdir(exist_ok=True)
        
        # –ë–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        self.default_config = {
            # ---- –ë–ª–æ–∫ –¥–∞–Ω–∏—Ö
            'N_data': 4000,
            'control_pts': 400, 
            'seed': 42,
            
            # ---- MPC –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            'horizon': 10,
            'prediction_horizon': 20,
            'control_horizon': 5,
            'sampling_time': 0.1,
            
            # ---- –ú–æ–¥–µ–ª—å
            'model_type': 'rbf',
            'kernel_type': 'gaussian',
            'regularization': 1e-6,
            'n_centers': 100,
            
            # ---- –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
            'optimizer': 'scipy',
            'max_iterations': 100,
            'tolerance': 1e-6,
            'trust_region_radius': 1.0,
            
            # ---- –û–±–º–µ–∂–µ–Ω–Ω—è
            'input_bounds': [(-2.0, 2.0), (-1.5, 1.5)],
            'output_bounds': [(-3.0, 3.0), (-2.0, 2.0)],
            'rate_limits': [(0.5, 0.5), (0.3, 0.3)],
            
            # ---- –í–∞–≥–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ
            'tracking_weight': 1.0,
            'control_weight': 0.1,
            'rate_weight': 0.01,
            'terminal_weight': 10.0,
            
            # ---- –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥–ª—è –º–∞–≥–Ω—ñ—Ç–Ω–æ—ó —Å–µ–ø–∞—Ä–∞—Ü—ñ—ó
            'magnetic_field_range': (0.1, 2.5),
            'flow_rate_range': (5.0, 50.0),
            'separation_efficiency_target': 0.85,
            'recovery_rate_target': 0.90,
            
            # ---- –ó–±—É—Ä–µ–Ω–Ω—è —Ç–∞ —à—É–º
            'process_noise_std': 0.01,
            'measurement_noise_std': 0.005,
            'disturbance_amplitude': 0.1,
            
            # ---- –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü—ñ—ó
            'verbose': True,
            'save_trajectory': True,
            'plot_results': False
        }
    
    def save_config(self, config: Dict[str, Any], name: str) -> Path:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        config_path = self.config_dir / f"{name}.json"
        
        with open(config_path, 'w') as f:
            json.dump(config, f, indent=2, default=str)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è '{name}' –∑–±–µ—Ä–µ–∂–µ–Ω–∞: {config_path}")
        return config_path
    
    def load_config(self, name: str) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        config_path = self.config_dir / f"{name}.json"
        
        if not config_path.exists():
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {config_path}")
        
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è '{name}' –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        return config
    
    def create_config(self, name: str, overrides: Dict[str, Any]) -> Dict[str, Any]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ override'–∞–º–∏"""
        config = self.default_config.copy()
        config.update(overrides)
        self.save_config(config, name)
        return config
    
    def list_configs(self) -> list:
        """–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"""
        configs = list(self.config_dir.glob("*.json"))
        return [c.stem for c in configs]
    
    def merge_config(self, base_config: str, overrides: Dict[str, Any], 
                    new_name: str) -> Dict[str, Any]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å–Ω—É—é—á–æ—ó + –∑–º—ñ–Ω–∏"""
        base = self.load_config(base_config)
        base.update(overrides)
        self.save_config(base, new_name)
        return base

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä
config_manager = MPCConfigManager()
print("‚úÖ MPCConfigManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

def main():
 
    your_original_params = {
        # ---- –ë–ª–æ–∫ –¥–∞–Ω–∏—Ö
        'N_data': 4000, 
        'control_pts': 400,
        'seed': 42,
        
        'plant_model_type': 'rf',
        
        'train_size': 0.75,
        'val_size': 0.2,
        'test_size': 0.05,
    
        # ---- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
        'noise_level': 'low',
        
        'model_type': 'linear',          # L-MPC
        'linear_type': 'ridge',          # ols, ridge, lasso
        'poly_degree': 2,                # 1=–ª—ñ–Ω—ñ–π–Ω–∞, 2=–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞, 3=–∫—É–±—ñ—á–Ω–∞
        'alpha': 1.0,                    # –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü—ñ—è –¥–ª—è ridge/lasso
        
        'find_optimal_params': True,      # –ê–≤—Ç–æ–ø–æ—à—É–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        'use_soft_constraints': True,
        
        # ---- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è EKF
        'P0': 1e-2,
        'Q_phys': 600,
        'Q_dist': 1,
        'R': 1.0,
        'q_adaptive_enabled': False,
        'q_alpha': 0.90,
        'q_nis_threshold': 3.0,
    
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π Trust Region
        'adaptive_trust_region': True,
        'initial_trust_radius': 3.0,
        'min_trust_radius': 0.5,
        'max_trust_radius': 2.0,
        'trust_decay_factor': 0.9,
        'rho_trust': 0.5,
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –ª—ñ–Ω–µ–∞—Ä–∏–∑–∞—Ü—ñ—ó
        'linearization_check_enabled': True,
        'max_linearization_distance': 0.8,
        'retrain_linearization_threshold': 1.0,
    
        # ---- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π
        'anomaly_params': {
            'window': 25,
            'spike_z': 4.0,
            'drop_rel': 0.30,
            'freeze_len': 5,
            'enabled': True
        },
    
        # ---- –ù–µ–ª—ñ–Ω—ñ–π–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        'nonlinear_config': {
            'concentrate_fe_percent': ('pow', 2),
            'concentrate_mass_flow': ('pow', 1.5)
        },
        'enable_nonlinear': True, 
    
        # ---- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞—Ç—Ä–∏–º–∫–∏, —á–∞—Å–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        'time_step_s': 1800,
        'dead_times_s': {
            'concentrate_fe_percent': 20.0,
            'tailings_fe_percent': 25.0,
            'concentrate_mass_flow': 20.0,
            'tailings_mass_flow': 25.0
        },
        'time_constants_s': {
            'concentrate_fe_percent': 8.0,
            'tailings_fe_percent': 10.0,
            'concentrate_mass_flow': 5.0,
            'tailings_mass_flow': 7.0
        },
        
        # ---- –û–±–º–µ–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
        'delta_u_max': 0.6,
        'Œª_obj': 0.2,
        
        # ---- MPC –≥–æ—Ä–∏–∑–æ–Ω—Ç–∏
        'Nc': 6,
        'Np': 8,
        'lag': 2,
        
        # ---- –¶—ñ–ª—å–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏/–≤–∞–≥–∏
        'w_fe': 1.0,
        'w_mass': 1.0,
        'ref_fe': 54.5,
        'ref_mass': 57.0,
        'y_max_fe': 55.0,
        'y_max_mass': 60.0,
        
        # ---- –ë–ª–æ–∫ –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        'enable_retraining': True,
        'retrain_period': 50,
        'retrain_window_size': 1000,
        'retrain_innov_threshold': 0.25,
        
        'run_analysis': False
    }
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –Ω–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å "oleksandr_original"
    saved_config = config_manager.create_config('oleksandr_original', your_original_params)
    
    print("‚úÖ –¢–≤–æ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø—Ä–æ—Ñ—ñ–ª—å: 'oleksandr_original'")
    print(f"üìä –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(your_original_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤")
if __name__ == '__main__':
    main()