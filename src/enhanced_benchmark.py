# enhanced_benchmark.py - –ü–û–í–ù–ò–ô –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–Ω—á–º–∞—Ä–∫ –∑ —É—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏

import time
import numpy as np
from typing import Dict, List, Optional
from contextlib import contextmanager
from model import KernelModel
import pandas as pd

@contextmanager
def timer():
    """Context manager –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É"""
    start = time.perf_counter()
    yield lambda: time.perf_counter() - start

# enhanced_benchmark.py - –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø —Ñ—É–Ω–∫—Ü—ñ–π benchmark –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é silent_mode

def benchmark_model_training(
    X_train: np.ndarray, 
    Y_train: np.ndarray,
    model_configs: List[Dict],
    silent_mode: bool = False  # üÜï –ù–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
) -> Dict[str, float]:
    """–ë–µ–Ω—á–º–∞—Ä–∫ —á–∞—Å—É –Ω–∞–≤—á–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π"""
    
    results = {}
    
    for config in model_configs:
        model_name = f"{config['model_type']}-{config.get('kernel', 'default')}"
        if not silent_mode:
            print(f"üîß –¢–µ—Å—Ç—É—é {model_name}...")
        
        # –ù–∞–≤—á–∞–Ω–Ω—è –∑ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è–º —á–∞—Å—É
        with timer() as get_time:
            model = KernelModel(**config)
            model.fit(X_train, Y_train)
        
        train_time = get_time()
        results[f"{model_name}_train_time"] = train_time
        
        # –ß–∞—Å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
        X_single = X_train[0:1]  # –û–¥–∏–Ω —Å–µ–º–ø–ª
        with timer() as get_time:
            for _ in range(100):  # 100 –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è
                _ = model.predict(X_single)
        
        pred_time = get_time() / 100  # –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
        results[f"{model_name}_predict_time"] = pred_time
        
        # –ß–∞—Å –ª—ñ–Ω–µ–∞—Ä–∏–∑–∞—Ü—ñ—ó
        with timer() as get_time:
            for _ in range(100):
                _ = model.linearize(X_single)
        
        linearize_time = get_time() / 100
        results[f"{model_name}_linearize_time"] = linearize_time
        
        if not silent_mode:
            print(f"   ‚úÖ Train: {train_time:.3f}s, Predict: {pred_time*1000:.2f}ms, Linearize: {linearize_time*1000:.2f}ms")
    
    return results

def benchmark_mpc_solve_time(mpc_controller, n_iterations: int = 50, silent_mode: bool = False) -> Dict[str, float]:
    """
    üîß –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –±–µ–Ω—á–º–∞—Ä–∫ —á–∞—Å—É —Ä–æ–∑–≤'—è–∑—É–≤–∞–Ω–Ω—è MPC –∑–∞–¥–∞—á—ñ
    """
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MPC
    prediction_horizon = getattr(mpc_controller, 'Np', 8)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–ø–æ–≤—É —ñ—Å—Ç–æ—Ä—ñ—é —Å—Ç–∞–Ω—É
    lag = getattr(mpc_controller, 'lag', 2)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é —Å—Ç–∞–Ω—É
    typical_history = np.array([
        [36.5, 102.2, 25.0],  # feed_fe, ore_flow, solid_feed
        [36.8, 101.8, 25.2],
        [37.1, 102.5, 25.1]
    ])
    
    # –û–±—Ä—ñ–∑–∞—î–º–æ –∞–±–æ —Ä–æ–∑—à–∏—Ä—é—î–º–æ –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
    if len(typical_history) < lag + 1:
        # –î—É–±–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫
        last_row = typical_history[-1]
        while len(typical_history) < lag + 1:
            typical_history = np.vstack([typical_history, last_row])
    else:
        typical_history = typical_history[:lag + 1]
    
    # ‚úÖ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–£–Ñ–ú–û MPC –ü–ï–†–ï–î –¢–ï–°–¢–û–ú
    try:
        mpc_controller.reset_history(typical_history)
        # print(f"   ‚úÖ MPC —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Ä–æ–∑–º—ñ—Ä—É {typical_history.shape}")
    except Exception as e:
        if not silent_mode:
            print(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó MPC: {e}")
        return {
            "mpc_solve_mean": 0.1,
            "mpc_solve_std": 0.0,
            "mpc_solve_min": 0.1,
            "mpc_solve_max": 0.1,
            "mpc_solve_median": 0.1,
            "mpc_iterations": 0,
            "mpc_success_rate": 0.0,
            "initialization_error": str(e)
        }
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–ø–æ–≤—ñ –≤—Ö–æ–¥–∏
    d_seq = np.array([[36.5, 102.2]] * prediction_horizon)
    u_prev = 25.0
    
    solve_times = []
    success_count = 0
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ n_iterations —Ä–∞–∑—ñ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    for iteration in range(n_iterations):
        try:
            with timer() as get_time:
                # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ optimize
                if hasattr(mpc_controller, 'adaptive_trust_region') and mpc_controller.adaptive_trust_region:
                    # –î–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ trust region
                    result = mpc_controller.optimize(
                        d_seq=d_seq, 
                        u_prev=u_prev, 
                        trust_radius=1.0  # –¢–∏–ø–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                    )
                else:
                    # –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ MPC
                    result = mpc_controller.optimize(
                        d_seq=d_seq, 
                        u_prev=u_prev
                    )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞–ª—ñ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result is not None and len(result) > 0:
                solve_times.append(get_time())
                success_count += 1
            else:
                solve_times.append(0.01)  # 10ms –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            
        except Exception as e:
            if iteration == 0 and not silent_mode:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
                print(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ MPC optimize (iteration {iteration}): {e}")
            # –î–æ–¥–∞—î–º–æ —Ç–∏–ø–æ–≤–∏–π —á–∞—Å —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
            solve_times.append(0.01)  # 10ms
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    solve_times = np.array(solve_times)
    success_rate = success_count / n_iterations
    
    if success_count > 0 and not silent_mode:
        # print(f"   ‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π: {success_count}/{n_iterations} ({success_rate*100:.1f}%)")
        # print(f"   ‚è±Ô∏è –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {np.mean(solve_times)*1000:.2f}ms")
        pass
    elif success_count == 0 and not silent_mode:
        print("   ‚ùå –ñ–æ–¥–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø—ñ—à–Ω–æ")
    
    return {
        "mpc_solve_mean": np.mean(solve_times),
        "mpc_solve_std": np.std(solve_times),
        "mpc_solve_min": np.min(solve_times),
        "mpc_solve_max": np.max(solve_times),
        "mpc_solve_median": np.median(solve_times),
        "mpc_iterations": n_iterations,
        "mpc_success_rate": success_rate
    }

def benchmark_mpc_control_quality(
    mpc_controller,
    true_gen,  # StatefulDataGenerator
    test_disturbances: np.ndarray,  # d_test –∑ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É
    initial_history: np.ndarray,    # hist0_unscaled
    reference_values: Dict[str, float],  # {'fe': 53.5, 'mass': 57.0}
    test_steps: int = 100,
    dt: float = 5.0,  # –ß–∞—Å–æ–≤–∏–π –∫—Ä–æ–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    silent_mode: bool = False  # üÜï –ù–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
) -> Dict[str, float]:
    """
    üîß –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –±–µ–Ω—á–º–∞—Ä–∫ –Ø–ö–û–°–¢–Ü –ö–ï–†–£–í–ê–ù–ù–Ø MPC
    """
    
    if not silent_mode:
        print(f"üéØ –ë–µ–Ω—á–º–∞—Ä–∫ —è–∫–æ—Å—Ç—ñ MPC –∫–µ—Ä—É–≤–∞–Ω–Ω—è ({test_steps} –∫—Ä–æ–∫—ñ–≤)...")
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    if initial_history is None or initial_history.size == 0:
        if not silent_mode:
            print("   ‚ö†Ô∏è –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–ø–æ–≤—É —ñ—Å—Ç–æ—Ä—ñ—é —Å—Ç–∞–Ω—É...")
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–ø–æ–≤—É —ñ—Å—Ç–æ—Ä—ñ—é
        lag = getattr(mpc_controller, 'lag', 2)
        initial_history = np.array([
            [36.5, 102.2, 25.0],
            [36.8, 101.8, 25.2],  
            [37.1, 102.5, 25.1]
        ][:lag + 1])
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MPC —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        mpc_controller.reset_history(initial_history)
        true_gen.reset_state(initial_history)
        if not silent_mode:
            print("   ‚úÖ MPC —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    except Exception as e:
        if not silent_mode:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        return {
            'control_IAE_fe': float('inf'),
            'control_IAE_mass': float('inf'),
            'quality_score': 1.0,
            'initialization_error': str(e),
            'test_steps_completed': 0
        }
    
    # –¶—ñ–ª—å–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    fe_setpoint = reference_values.get('fe', 53.5)
    mass_setpoint = reference_values.get('mass', 57.0)
    
    # –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö —Å–∏–º—É–ª—è—Ü—ñ—ó
    fe_trajectory = []
    mass_trajectory = []
    control_actions = []
    tracking_errors = []
    
    u_prev = float(initial_history[-1, 2])  # –û—Å—Ç–∞–Ω–Ω—î –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä test_disturbances
    actual_test_steps = min(test_steps, len(test_disturbances))
    if actual_test_steps < 10:
        if not silent_mode:
            print(f"   ‚ö†Ô∏è –ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ –∫—Ä–æ–∫—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É: {actual_test_steps}")
        return {
            'control_IAE_fe': float('inf'),
            'control_IAE_mass': float('inf'), 
            'quality_score': 1.0,
            'insufficient_data': True,
            'test_steps_completed': actual_test_steps
        }
    
    successful_steps = 0
    
    for step in range(actual_test_steps):
        try:
            # –ü–æ—Ç–æ—á–Ω—ñ –∑–±—É—Ä–µ–Ω–Ω—è
            d_current = test_disturbances[step]
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –∑–±—É—Ä–µ–Ω—å –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç—É MPC
            d_seq = np.tile(d_current, (mpc_controller.Np, 1))
            
            # MPC –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
            try:
                u_seq = mpc_controller.optimize(d_seq=d_seq, u_prev=u_prev)
                u_current = u_seq[0] if u_seq is not None else u_prev
            except Exception as opt_e:
                if step < 5 and not silent_mode:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–∏—Ö –∫—Ä–æ–∫—ñ–≤
                    print(f"   ‚ö†Ô∏è MPC –ø–æ–º–∏–ª–∫–∞ –Ω–∞ –∫—Ä–æ—Ü—ñ {step}: {opt_e}")
                u_current = u_prev  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∫–µ—Ä—É–≤–∞–Ω–Ω—è
            
            # –ö—Ä–æ–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
            try:
                y_step = true_gen.step(d_current[0], d_current[1], u_current)
                
                # –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                fe_value = y_step['concentrate_fe_percent'].iloc[0]
                mass_value = y_step['concentrate_mass_flow'].iloc[0]
                
                fe_trajectory.append(fe_value)
                mass_trajectory.append(mass_value)
                control_actions.append(u_current)
                
                # –ü–æ–º–∏–ª–∫–∏ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è
                fe_error = fe_value - fe_setpoint
                mass_error = mass_value - mass_setpoint
                tracking_errors.append([fe_error, mass_error])
                
                successful_steps += 1
                
            except Exception as gen_e:
                if step < 5 and not silent_mode:
                    print(f"   ‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–º–∏–ª–∫–∞ –Ω–∞ –∫—Ä–æ—Ü—ñ {step}: {gen_e}")
                break  # –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            
            u_prev = u_current
            
        except Exception as e:
            if step < 5 and not silent_mode:
                print(f"   ‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ –∫—Ä–æ—Ü—ñ {step}: {e}")
            break
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–∞—î–º–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö
    if successful_steps < 5:
        if not silent_mode:
            print(f"   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É—Å–ø—ñ—à–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤: {successful_steps}")
        return {
            'control_IAE_fe': float('inf'),
            'control_IAE_mass': float('inf'),
            'quality_score': 1.0,
            'insufficient_successful_steps': successful_steps,
            'test_steps_completed': successful_steps
        }
    
    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ numpy –º–∞—Å–∏–≤–∏
    fe_array = np.array(fe_trajectory)
    mass_array = np.array(mass_trajectory)
    u_array = np.array(control_actions)
    error_array = np.array(tracking_errors)
    
    # === –ú–ï–¢–†–ò–ö–ò –Ø–ö–û–°–¢–Ü –ö–ï–†–£–í–ê–ù–ù–Ø ===
    
    # 1. –Ü–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ñ –ø–æ–º–∏–ª–∫–∏ (IAE, ISE, ITAE)
    fe_errors = np.abs(error_array[:, 0])
    mass_errors = np.abs(error_array[:, 1])
    
    IAE_fe = np.sum(fe_errors) * dt
    IAE_mass = np.sum(mass_errors) * dt
    
    ISE_fe = np.sum(error_array[:, 0]**2) * dt
    ISE_mass = np.sum(error_array[:, 1]**2) * dt
    
    # ITAE (Time-weighted errors)
    time_weights = np.arange(1, len(fe_errors) + 1) * dt
    ITAE_fe = np.sum(time_weights * fe_errors) * dt
    ITAE_mass = np.sum(time_weights * mass_errors) * dt
    
    # 2. –°—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ (–æ—Å—Ç–∞–Ω–Ω—è —Ç—Ä–µ—Ç–∏–Ω–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó)
    steady_start = len(fe_trajectory) * 2 // 3
    fe_steady_error = np.abs(np.mean(fe_trajectory[steady_start:]) - fe_setpoint)
    mass_steady_error = np.abs(np.mean(mass_trajectory[steady_start:]) - mass_setpoint)
    
    # 3. –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤ —Å—Ç–∞–ª–æ–º—É —Ä–µ–∂–∏–º—ñ)
    fe_stability = np.std(fe_trajectory[steady_start:])
    mass_stability = np.std(mass_trajectory[steady_start:])
    
    # 4. –ö–µ—Ä—É–≤–∞–Ω–Ω—è: –∑—É—Å–∏–ª–ª—è —Ç–∞ –≤–∞—Ä—ñ–∞—Ü—ñ—è
    control_effort = np.sum(u_array**2) * dt
    control_variation = np.sum(np.diff(u_array)**2) if len(u_array) > 1 else 0.0
    control_smoothness = np.mean(np.abs(np.diff(u_array))) if len(u_array) > 1 else 0.0
    
    # 5. –ß–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è (settling time) - –∫–æ–ª–∏ –ø–æ–º–∏–ª–∫–∞ < 5%
    fe_settling_threshold = 0.05 * fe_setpoint
    mass_settling_threshold = 0.05 * mass_setpoint
    
    fe_settling_time = None
    mass_settling_time = None
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —á–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
    for i in range(len(fe_errors)):
        if fe_settling_time is None and fe_errors[i] < fe_settling_threshold:
            fe_settling_time = i * dt
        if mass_settling_time is None and mass_errors[i] < mass_settling_threshold:
            mass_settling_time = i * dt
        if fe_settling_time is not None and mass_settling_time is not None:
            break
    
    # 6. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–µ—Ä–µ—Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è
    fe_overshoot = max(0, np.max(fe_array) - fe_setpoint) / fe_setpoint * 100
    
    # 7. –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ (–∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞)
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ setpoint
    normalized_IAE_fe = IAE_fe / (fe_setpoint * successful_steps * dt)
    normalized_IAE_mass = IAE_mass / (mass_setpoint * successful_steps * dt)
    
    # –ó–≤–∞–∂–µ–Ω–∞ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ (–º–µ–Ω—à–µ = –∫—Ä–∞—â–µ)
    quality_score = (
        0.4 * normalized_IAE_fe +      # 40% - —Ç–æ—á–Ω—ñ—Å—Ç—å Fe
        0.3 * normalized_IAE_mass +    # 30% - —Ç–æ—á–Ω—ñ—Å—Ç—å Mass  
        0.2 * control_smoothness / 10 + # 20% - –ø–ª–∞–≤–Ω—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        0.1 * (fe_stability + mass_stability) / 2  # 10% - —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
    )
    
    # === –ü–û–í–ï–†–¢–ê–Ñ–ú–û –ú–ï–¢–†–ò–ö–ò ===
    metrics = {
        # –Ü–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        'control_IAE_fe': float(IAE_fe),
        'control_IAE_mass': float(IAE_mass),
        'control_ISE_fe': float(ISE_fe),
        'control_ISE_mass': float(ISE_mass),
        'control_ITAE_fe': float(ITAE_fe),
        'control_ITAE_mass': float(ITAE_mass),
        
        # –°—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏
        'steady_error_fe': float(fe_steady_error),
        'steady_error_mass': float(mass_steady_error),
        
        # –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
        'stability_fe': float(fe_stability),
        'stability_mass': float(mass_stability),
        
        # –ö–µ—Ä—É–≤–∞–Ω–Ω—è
        'control_effort': float(control_effort),
        'control_variation': float(control_variation),
        'control_smoothness': float(control_smoothness),
        
        # –î–∏–Ω–∞–º—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        'settling_time_fe': float(fe_settling_time) if fe_settling_time is not None else float(successful_steps * dt),
        'settling_time_mass': float(mass_settling_time) if mass_settling_time is not None else float(successful_steps * dt),
        'overshoot_fe_percent': float(fe_overshoot),
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
        'quality_score': float(quality_score),
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        'test_steps_completed': successful_steps,
        'mean_fe_achieved': float(np.mean(fe_array)),
        'mean_mass_achieved': float(np.mean(mass_array)),
        'fe_setpoint': fe_setpoint,
        'mass_setpoint': mass_setpoint,
        'success_rate': successful_steps / actual_test_steps
    }
    
    # –í–∏–≤–æ–¥–∏–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ silent_mode)
    if not silent_mode:
        print(f"   üìä –Ø–∫—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è (—É—Å–ø—ñ—à–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤: {successful_steps}):")
        print(f"      IAE: Fe={IAE_fe:.3f}, Mass={IAE_mass:.3f}")
        print(f"      –°—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: Fe={fe_steady_error:.3f}, Mass={mass_steady_error:.3f}")
        print(f"      –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å: Fe={fe_stability:.3f}, Mass={mass_stability:.3f}")
        print(f"      –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: {quality_score:.4f} (–º–µ–Ω—à–µ = –∫—Ä–∞—â–µ)")
    
    return metrics

def comprehensive_mpc_benchmark(
    mpc_controller,
    true_gen, 
    test_data: Dict,
    model_config: Dict,
    reference_values: Optional[Dict] = None,
    benchmark_config: Optional[Dict] = None
) -> Dict[str, float]:
    """
    üîß –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –±–µ–Ω—á–º–∞—Ä–∫ MPC: —à–≤–∏–¥–∫—ñ—Å—Ç—å + —è–∫—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    """
    
    print("üî¨ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ë–ï–ù–ß–ú–ê–†–ö MPC")
    print("="*50)
    
    # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if reference_values is None:
        reference_values = {'fe': 53.5, 'mass': 57.0}
    
    if benchmark_config is None:
        benchmark_config = {
            'speed_iterations': 50,
            'quality_test_steps': 100,
            'model_training_repeats': 5
        }
    
    all_metrics = {}
    
    # 1. üöÄ –ë–ï–ù–ß–ú–ê–†–ö –®–í–ò–î–ö–û–°–¢–Ü –ú–û–î–ï–õ–Ü
    print("1Ô∏è‚É£ –ë–µ–Ω—á–º–∞—Ä–∫ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ...")
    model_configs = [model_config]
    speed_metrics = benchmark_model_training(
        test_data['X_train_scaled'],
        test_data['Y_train_scaled'],
        model_configs
    )
    all_metrics.update(speed_metrics)
    
    # 2. ‚ö° –ë–ï–ù–ß–ú–ê–†–ö –®–í–ò–î–ö–û–°–¢–Ü MPC (–í–ò–ü–†–ê–í–õ–ï–ù–ò–ô)
    print("2Ô∏è‚É£ –ë–µ–Ω—á–º–∞—Ä–∫ —à–≤–∏–¥–∫–æ—Å—Ç—ñ MPC...")
    mpc_speed_metrics = benchmark_mpc_solve_time(
        mpc_controller, 
        n_iterations=benchmark_config['speed_iterations']
    )
    all_metrics.update(mpc_speed_metrics)
    
    # 3. üéØ –ë–ï–ù–ß–ú–ê–†–ö –Ø–ö–û–°–¢–Ü –ö–ï–†–£–í–ê–ù–ù–Ø (–í–ò–ü–†–ê–í–õ–ï–ù–ò–ô)
    print("3Ô∏è‚É£ –ë–µ–Ω—á–º–∞—Ä–∫ —è–∫–æ—Å—Ç—ñ –∫–µ—Ä—É–≤–∞–Ω–Ω—è...")
    if ('test_disturbances' in test_data and 
        'initial_history' in test_data):
        
        quality_metrics = benchmark_mpc_control_quality(
            mpc_controller=mpc_controller,
            true_gen=true_gen,
            test_disturbances=test_data['test_disturbances'],
            initial_history=test_data['initial_history'],
            reference_values=reference_values,
            test_steps=benchmark_config['quality_test_steps']
        )
        all_metrics.update(quality_metrics)
    else:
        print("   ‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—É —è–∫–æ—Å—Ç—ñ –∫–µ—Ä—É–≤–∞–Ω–Ω—è")
    
    # 4. üìä –ó–ê–ì–ê–õ–¨–ù–ê –û–¶–Ü–ù–ö–ê –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü
    print("4Ô∏è‚É£ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫...")
    
    # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ (–Ω–∏–∂—á–µ = –∫—Ä–∞—â–µ)
    model_name = f"{model_config['model_type']}-{model_config.get('kernel', 'default')}"
    
    train_time = all_metrics.get(f"{model_name}_train_time", 1.0)
    predict_time = all_metrics.get(f"{model_name}_predict_time", 0.01)
    mpc_solve_time = all_metrics.get("mpc_solve_mean", 0.1)
    
    # –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª—É MPC
    total_cycle_time = predict_time + mpc_solve_time
    all_metrics["total_cycle_time"] = total_cycle_time
    
    # –û—Ü—ñ–Ω–∫–∞ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ –¥–ª—è real-time (—Ü–∏–∫–ª < 5 —Å–µ–∫—É–Ω–¥)
    real_time_suitable = total_cycle_time < 5.0
    all_metrics["real_time_suitable"] = real_time_suitable
    
    # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ-—à–≤–∏–¥–∫–æ—Å—Ç—ñ
    quality_score = all_metrics.get("quality_score", 1.0)
    
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —á–∞—Å (1 —Å–µ–∫—É–Ω–¥–∞ = 1.0)
    normalized_time = total_cycle_time / 1.0
    
    # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞: balance –º—ñ–∂ —è–∫—ñ—Å—Ç—é —ñ —à–≤–∏–¥–∫—ñ—Å—Ç—é
    # –ú–µ–Ω—à–µ = –∫—Ä–∞—â–µ (–≥–∞—Ä–Ω–∞ —è–∫—ñ—Å—Ç—å + –≤–∏—Å–æ–∫–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å)
    quality_speed_balance = quality_score + 0.1 * normalized_time
    all_metrics["quality_speed_balance"] = quality_speed_balance
    
    # 5. üìà –ü–Ü–î–°–£–ú–û–ö
    print("\nüìà –ü–Ü–î–°–£–ú–û–ö –ë–ï–ù–ß–ú–ê–†–ö–£:")
    print(f"   üöÄ –®–≤–∏–¥–∫—ñ—Å—Ç—å: {total_cycle_time*1000:.1f}ms/—Ü–∏–∫–ª")
    print(f"   üéØ –Ø–∫—ñ—Å—Ç—å: {quality_score:.4f}")
    print(f"   ‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {quality_speed_balance:.4f}")
    print(f"   ‚è±Ô∏è Real-time: {'‚úÖ' if real_time_suitable else '‚ùå'}")
    print(f"   üìä –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å MPC: {all_metrics.get('mpc_success_rate', 0)*100:.1f}%")
    
    return all_metrics

def compare_mpc_configurations(
    configurations: List[Dict],
    hist_df: pd.DataFrame,
    base_config: str = 'oleksandr_original',
    comparison_steps: int = 50
) -> pd.DataFrame:
    """üîÑ –í–ò–ü–†–ê–í–õ–ï–ù–ï –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π MPC –∑ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–º–∏ –∑–≤—ñ—Ç–∞–º–∏"""
    
    print("üîÑ –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–ô MPC")
    print("="*50)
    
    comparison_results = []
    detailed_reports = []  # üÜï –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    
    for i, config in enumerate(configurations):
        config_name = config.get('name', f'Config_{i+1}')
        print(f"\nüß™ –¢–µ—Å—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é {i+1}/{len(configurations)}: {config_name}")
        
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ª–æ–∫–∞–ª—å–Ω–æ
            from enhanced_sim import simulate_mpc_core_enhanced as simulate_mpc_core
            
            # –ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –ö–û–ù–¢–†–û–õ–ï–ú –í–ò–í–û–î–£
            test_config = config.copy()
            test_config.update({
                'N_data': 1000,
                'control_pts': comparison_steps,
                'run_analysis': False,  # üîß –í–∏–º–∏–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑
                'benchmark_speed_analysis': False,  # üîß –í–∏–º–∏–∫–∞—î–º–æ –ø—Ä–æ–º—ñ–∂–Ω—ñ –∑–≤—ñ—Ç–∏
                'enable_comprehensive_analysis': False,  # üîß –í–∏–º–∏–∫–∞—î–º–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
                'silent_mode': True,  # üîß –ö–õ–Æ–ß–û–í–ï: –º—ñ–Ω—ñ–º—ñ–∑—É—î–º–æ –≤–∏–≤—ñ–¥ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                'verbose_reports': False  # üîß –ö–õ–Æ–ß–û–í–ï: –≤–∏–º–∏–∫–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            })
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–º—É–ª—è—Ü—ñ—é –ë–ï–ó –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö –≤–∏–≤–æ–¥—ñ–≤
            test_config.pop('name', None)
            results_df, metrics = simulate_mpc_core(hist_df, **test_config)
            
            # –ó–±–∏—Ä–∞—î–º–æ –∫–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏ + –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            comparison_row = {
                'Configuration': config_name,
                'Model': f"{config.get('model_type', 'unknown')}-{config.get('kernel', 'default')}",
                # ... —ñ–Ω—à—ñ –º–µ—Ç—Ä–∏–∫–∏
            }
            
            if isinstance(metrics, dict):
                comparison_row.update({
                    'RMSE_Fe': metrics.get('test_rmse_conc_fe', np.nan),
                    'RMSE_Mass': metrics.get('test_rmse_conc_mass', np.nan),
                    'Quality_Score': metrics.get('quality_score', np.nan),
                    # ... —ñ–Ω—à—ñ –º–µ—Ç—Ä–∏–∫–∏
                })
                
                # üÜï –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –î–ï–¢–ê–õ–¨–ù–Ü –ú–ï–¢–†–ò–ö–ò –î–õ–Ø –ü–û–î–ê–õ–¨–®–û–ì–û –ó–í–Ü–¢–£
                detailed_report = {
                    'config_name': config_name,
                    'config_details': config,
                    'results_df': results_df,
                    'full_metrics': metrics,
                    'summary_metrics': comparison_row
                }
                detailed_reports.append(detailed_report)
            
            comparison_results.append(comparison_row)
            
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            comparison_results.append({
                'Configuration': config_name,
                'Error': str(e)
            })
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    comparison_df = pd.DataFrame(comparison_results)
    
    # üÜï –í–ò–í–û–î–ò–ú–û –î–ï–¢–ê–õ–¨–ù–Ü –ó–í–Ü–¢–ò –î–õ–Ø –ö–û–ñ–ù–û–á –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á
    print(f"\n" + "="*80)
    print("üìä –î–ï–¢–ê–õ–¨–ù–Ü –ó–í–Ü–¢–ò –î–õ–Ø –ö–û–ñ–ù–û–á –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á")
    print("="*80)
    
    for i, report in enumerate(detailed_reports):
        config_name = report['config_name']
        metrics = report['full_metrics']
        results_df = report['results_df']
        config_details = report['config_details']
        
        print(f"\n{'='*60}")
        print(f"üìã –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø {i+1}/{len(detailed_reports)}: {config_name}")
        print(f"={'='*60}")
        
        # üîß –§–Ü–ù–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ –ü–†–û –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨ (–¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó)
        print("\nüîç –ó–í–Ü–¢ –ü–†–û –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨:")
        print("-" * 40)
        
        key_metrics = ['test_rmse_conc_fe', 'test_rmse_conc_mass', 'r2_fe', 'r2_mass', 'test_mse_total']
        for metric in key_metrics:
            if metric in metrics:
                value = metrics[metric]
                if hasattr(value, 'item'):
                    value = value.item()
                print(f"   üìä {metric}: {value:.6f}")
        
        # üîß –†–ï–ê–õ–Ü–°–¢–ò–ß–ù–Ü –ú–ï–¢–†–ò–ö–ò –Ø–ö–û–°–¢–Ü MPC (–¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó)
        print("\nüéØ –†–ï–ê–õ–Ü–°–¢–ò–ß–ù–Ü –ú–ï–¢–†–ò–ö–ò –Ø–ö–û–°–¢–Ü MPC:")
        print("-" * 40)
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ compute_correct_mpc_metrics –ë–ï–ó –≤–∏–≤–æ–¥—É –Ω–∞ –∫–æ–Ω—Å–æ–ª—å
        import sys
        from io import StringIO
        
        # –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –≤–∏–≤—ñ–¥
        old_stdout = sys.stdout
        sys.stdout = StringIO()
        
        try:
            from enhanced_sim import compute_correct_mpc_metrics
            updated_metrics = compute_correct_mpc_metrics(
                results_df, metrics.copy(), {
                    'fe': config_details.get('ref_fe', 53.5),
                    'mass': config_details.get('ref_mass', 57.0)
                }
            )
        finally:
            sys.stdout = old_stdout
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–ª—é—á–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        if 'tracking_error_fe_mae' in updated_metrics:
            print(f"   üìà Fe —Ç–æ—á–Ω—ñ—Å—Ç—å (MAE): {updated_metrics['tracking_error_fe_mae']:.3f}%")
        
        if 'tracking_error_mass_mae' in updated_metrics:
            print(f"   üìà Mass —Ç–æ—á–Ω—ñ—Å—Ç—å (MAE): {updated_metrics['tracking_error_mass_mae']:.3f} —Ç/–≥–æ–¥")
        
        if 'control_smoothness' in updated_metrics:
            print(f"   üéõÔ∏è –ü–ª–∞–≤–Ω—ñ—Å—Ç—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è: {updated_metrics['control_smoothness']:.3f}%")
        
        if 'mpc_quality_score' in updated_metrics:
            print(f"   üèÜ –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ MPC: {updated_metrics['mpc_quality_score']:.1f}/100")
        
        if 'mpc_quality_class' in updated_metrics:
            print(f"   üìä –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è: {updated_metrics['mpc_quality_class']}")
        
        if 'recommendations' in updated_metrics:
            recommendations = updated_metrics['recommendations']
            if recommendations:
                print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
                for j, rec in enumerate(recommendations[:3], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–ø-3
                    print(f"      {j}. {rec}")
    
    # üÜï –ü–Ü–î–°–£–ú–ö–û–í–ê –¢–ê–ë–õ–ò–¶–Ø –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø
    print(f"\n" + "="*80)
    print(f"üìä –ü–Ü–î–°–£–ú–ö–û–í–ê –¢–ê–ë–õ–ò–¶–Ø –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø")
    print("="*80)
    
    if not comparison_df.empty:
        display_cols = ['Configuration', 'Model', 'RMSE_Fe', 'Quality_Score', 'Total_Cycle_Time']
        available_cols = [col for col in display_cols if col in comparison_df.columns]
        if available_cols:
            print(comparison_df[available_cols].round(4))
    
    return comparison_df

def pandas_safe_sort(df, column):
    """–ë–µ–∑–ø–µ—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –≤–µ—Ä—Å—ñ–π pandas"""
    if df.empty or column not in df.columns:
        return df
    
    try:
        return df.sort_values(column, na_position='last')
    except (TypeError, ValueError):
        try:
            return df.sort_values(column, na_last=True)
        except (TypeError, ValueError):
            # –†—É—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            valid_mask = df[column].notna()
            if valid_mask.any():
                valid_df = df[valid_mask].sort_values(column)
                invalid_df = df[~valid_mask]
                return pd.concat([valid_df, invalid_df], ignore_index=True)
            return df
        
# ‚úÖ –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å
print("‚úÖ –ü–û–í–ù–ò–ô –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–Ω—á–º–∞—Ä–∫ –≥–æ—Ç–æ–≤–∏–π!")
print("üîß –î–æ–¥–∞–Ω–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:")
print("   ‚Ä¢ compare_mpc_configurations()")
print("   ‚Ä¢ create_default_test_data()")
print("   ‚Ä¢ quick_mpc_health_check()")
print("   ‚Ä¢ benchmark_summary_report()")
print("üöÄ –¢–µ–ø–µ—Ä —É—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏ –º–∞—é—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!")